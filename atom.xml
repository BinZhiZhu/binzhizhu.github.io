<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BinZhiZhu&#39;s Blog</title>
  
  <subtitle>Hello,World.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://binzhizhu.github.io/"/>
  <updated>2019-06-30T07:20:15.652Z</updated>
  <id>http://binzhizhu.github.io/</id>
  
  <author>
    <name>BinZhi Zhu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>优雅的提交你的Git-commit</title>
    <link href="http://binzhizhu.github.io/2019/06/30/%E4%BC%98%E9%9B%85%E7%9A%84%E6%8F%90%E4%BA%A4%E4%BD%A0%E7%9A%84Git-commit/"/>
    <id>http://binzhizhu.github.io/2019/06/30/优雅的提交你的Git-commit/</id>
    <published>2019-06-30T03:55:39.000Z</published>
    <updated>2019-06-30T07:20:15.652Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Commitizen-替代你的-git-commit"><a href="#Commitizen-替代你的-git-commit" class="headerlink" title="Commitizen: 替代你的 git commit"></a>Commitizen: 替代你的 git commit</h2><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://link.zhihu.com/?target=https%3A//github.com/commitizen/cz-cli" target="_blank" rel="noopener">commitizen/cz-cli</a>, 我们需要借助它提供的 git cz 命令替代我们的 git commit 命令, 帮助我们生成符合规范的 commit message.</p><p>除此之外, 我们还需要为 commitizen 指定一个 Adapter 比如: <a href="https://link.zhihu.com/?target=https%3A//github.com/commitizen/cz-conventional-changelog" target="_blank" rel="noopener">cz-conventional-changelog</a> (一个符合 Angular团队规范的 preset). 使得 commitizen 按照我们指定的规范帮助我们生成 commit message.</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g commitizen cz-conventional-changelog</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&#123; "path": "cz-conventional-changelog" &#125;'</span> &gt; ~/.czrc</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>通常我们提交代码是使用 git commit -m 的形式，现在直接使用git cz 即可替代。</p><h2 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h2><ul><li>type: commit 的类型</li><li>feat: 新特性</li><li>fix: 修改问题</li><li>refactor: 代码重构</li><li>docs: 文档修改</li><li>style: 代码格式修改, 注意不是 css 修改</li><li>test: 测试用例修改</li><li>chore: 其他修改, 比如构建流程, 依赖管理.</li><li>scope: commit 影响的范围, 比如: route, component, utils, build…</li><li>subject: commit 的概述, 建议符合 <a href="https://link.zhihu.com/?target=https%3A//stackoverflow.com/questions/2290016/git-commit-messages-50-72-formatting" target="_blank" rel="noopener">50/72 formatting</a></li><li>body: commit 具体修改内容, 可以分为多行, 建议符合 <a href="https://link.zhihu.com/?target=https%3A//stackoverflow.com/questions/2290016/git-commit-messages-50-72-formatting" target="_blank" rel="noopener">50/72 formatting</a></li><li>footer: 一些备注, 通常是 BREAKING CHANGE 或修复的 bug 的链接.</li></ul><h3 id="standard-version-自动生成-CHANGELOG"><a href="#standard-version-自动生成-CHANGELOG" class="headerlink" title="standard-version: 自动生成 CHANGELOG"></a>standard-version: 自动生成 CHANGELOG</h3><h4 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S standard-version</span><br></pre></td></tr></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>package.json :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scirpt&quot;: &#123;</span><br><span class="line">    ...,</span><br><span class="line">    &quot;release&quot;: &quot;standard-version&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run release</span><br></pre></td></tr></table></figure><p>你会发现你git cz 的提交会自动生成一个CHANGELOG.md</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Commitizen-替代你的-git-commit&quot;&gt;&lt;a href=&quot;#Commitizen-替代你的-git-commit&quot; class=&quot;headerlink&quot; title=&quot;Commitizen: 替代你的 git commit&quot;&gt;&lt;/a&gt;Commiti
      
    
    </summary>
    
    
      <category term="git" scheme="http://binzhizhu.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>折腾了一天，撸了个v2ex小程序</title>
    <link href="http://binzhizhu.github.io/2019/06/29/%E6%8A%98%E8%85%BE%E4%BA%86%E4%B8%80%E5%A4%A9%EF%BC%8C%E6%92%B8%E4%BA%86%E4%B8%AAv2ex%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <id>http://binzhizhu.github.io/2019/06/29/折腾了一天，撸了个v2ex小程序/</id>
    <published>2019-06-29T13:45:53.000Z</published>
    <updated>2019-06-30T15:46:47.023Z</updated>
    
    <content type="html"><![CDATA[<h2 id="V2EX小程序"><a href="#V2EX小程序" class="headerlink" title="V2EX小程序"></a>V2EX小程序</h2><p>基于Taro实现的v2ex小程序</p><h3 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h3><p>Taro-v2ex-weapp: <a href="https://github.com/BinZhiZhu/Taro-v2ex-weapp" target="_blank" rel="noopener">https://github.com/BinZhiZhu/Taro-v2ex-weapp</a></p><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>├── dist                   编译结果目录<br>├── config                 配置目录<br>|   ├── dev.js             开发时配置<br>|   ├── index.js           默认配置<br>|   └── prod.js            打包时配置<br>├── src                    源码目录<br>|   ├── pages              页面文件目录<br>|   |   ├── index          index 页面目录<br>|   |   |   ├── index.js   index 页面逻辑<br>|   |   |   └── index.css  index 页面样式<br>|   ├── app.css            项目总通用样式<br>|   └── app.js             项目入口文件<br>└── package.json  </p><h3 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h3><p>Taro(React) + typescript（部分）</p><p>状态管理：Redux</p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>v2ex开放API支持(如果侵权请联系本人修正)</p><h2 id="DEPLOY"><a href="#DEPLOY" class="headerlink" title="DEPLOY"></a>DEPLOY</h2><ul><li><p>安装Taro(参考官方)</p></li><li><p>dev环境: npm run dev:weapp</p></li><li><p>打包： npm run build:weapp</p></li></ul><h3 id="开发时间线"><a href="#开发时间线" class="headerlink" title="开发时间线"></a>开发时间线</h3><p>1.首页最新主题</p><p>2.主题详情</p><p>3.热门主题</p><p>4.节点</p><p>5.节点详情</p><h3 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h3><ul><li><p>首页: <img src="http://img.binzhizhu.top/imgs/2019/06/54b6624c1e3bf106.png" alt=""></p></li><li><p>热门: <img src="http://img.binzhizhu.top/imgs/2019/06/03d291e0ea9fb45d.png" alt=""></p></li><li><p>节点: <img src="http://img.binzhizhu.top/imgs/2019/06/b9e187a6a727d0ee.png" alt=""></p></li><li><p>节点详情: <img src="http://img.binzhizhu.top/imgs/2019/06/85a2c7f481a50797.png" alt=""></p></li></ul><ul><li>话题回复: <img src="http://img.binzhizhu.top/imgs/2019/06/04b64c2985121708.png" alt=""></li><li></li><li>个人主页: <img src="http://img.binzhizhu.top/imgs/2019/06/29748a4f9195f604.png" alt=""></li><li>h5-首页: <img src="http://img.binzhizhu.top/imgs/2019/06/f40382d6240bbdc8.jpg" alt=""></li><li>h5-热门： <img src="http://img.binzhizhu.top/imgs/2019/06/7bdea439e6db9f65.jpg" alt=""></li><li>h5-节点：<img src="http://img.binzhizhu.top/imgs/2019/06/58a217abf6146bc1.jpg" alt=""></li></ul><h3 id="release"><a href="#release" class="headerlink" title="release"></a>release</h3><p>发布版本</p><ul><li>1.0.0 </li></ul><p><img src="http://img.binzhizhu.top/imgs/2019/06/3c9ddb8b3d48dc3e.jpg" alt=""></p><h3 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h3><p>1.下拉加载</p><p>2.TypeScript 重构</p><p>3.拆分组件</p><p>4.H5版本</p><ol start="4"><li>TDD</li></ol><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h3 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h3><ul><li><p>计算时间戳时分秒func来源于v2er封装 原贴 <a href="https://www.v2ex.com/t/578465#reply6" target="_blank" rel="noopener">https://www.v2ex.com/t/578465#reply6</a></p></li><li><p>utils下的api.ts封装来源于 taro官方taro-v2ex-hook repo里的简单封装</p></li></ul><h3 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h3><ul><li><p>v2ex  <a href="https://www.v2ex.com/p/7v9TEc53" target="_blank" rel="noopener">https://www.v2ex.com/p/7v9TEc53</a></p></li><li><p>taro  <a href="https://nervjs.github.io/taro/docs/GETTING-STARTED.html" target="_blank" rel="noopener">https://nervjs.github.io/taro/docs/GETTING-STARTED.html</a></p></li></ul><h3 id="License"><a href="#License" class="headerlink" title="License"></a>License</h3><p>MIT</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;V2EX小程序&quot;&gt;&lt;a href=&quot;#V2EX小程序&quot; class=&quot;headerlink&quot; title=&quot;V2EX小程序&quot;&gt;&lt;/a&gt;V2EX小程序&lt;/h2&gt;&lt;p&gt;基于Taro实现的v2ex小程序&lt;/p&gt;
&lt;h3 id=&quot;仓库&quot;&gt;&lt;a href=&quot;#仓库&quot; cla
      
    
    </summary>
    
    
      <category term="v2ex" scheme="http://binzhizhu.github.io/tags/v2ex/"/>
    
      <category term="taro" scheme="http://binzhizhu.github.io/tags/taro/"/>
    
      <category term="小程序" scheme="http://binzhizhu.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB基础学习笔记</title>
    <link href="http://binzhizhu.github.io/2019/06/24/MongoDB%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://binzhizhu.github.io/2019/06/24/MongoDB基础学习笔记/</id>
    <published>2019-06-23T16:20:40.000Z</published>
    <updated>2019-06-24T13:23:17.228Z</updated>
    
    <content type="html"><![CDATA[<h2 id="非关系型数据库-NoSql-：MongoDB"><a href="#非关系型数据库-NoSql-：MongoDB" class="headerlink" title="非关系型数据库(NoSql)：MongoDB"></a>非关系型数据库(NoSql)：MongoDB</h2><h3 id="与关系型数据库的比较"><a href="#与关系型数据库的比较" class="headerlink" title="与关系型数据库的比较"></a>与关系型数据库的比较</h3><p>关系型数据库(MySQL)：数据库、数据表（table）、数据行</p><p>MongoDB：数据库、集合（collections）、文件</p><p>我们发现本质的关系还是不变的</p><h3 id="安装与运行"><a href="#安装与运行" class="headerlink" title="安装与运行"></a>安装与运行</h3><p>我这边的开发环境是统一使用docker部署的，所以只需要在docker-composer补充MongoDB的配置即可，代码如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 十分吃内存的nosql数据库</span></span><br><span class="line"><span class="attr"> mongo:</span></span><br><span class="line"><span class="attr">   image:</span> <span class="string">mongo</span></span><br><span class="line"><span class="attr">   environment:</span></span><br><span class="line"><span class="attr">     MONGO_INITDB_ROOT_USERNAME:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">     MONGO_INITDB_ROOT_PASSWORD:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">   ports:</span></span><br><span class="line"><span class="bullet">     -</span> <span class="number">27017</span><span class="string">:27017</span></span><br><span class="line"><span class="attr">   volumes:</span></span><br><span class="line"><span class="bullet">     -</span> <span class="string">./mongo:/data/db</span></span><br></pre></td></tr></table></figure><ul><li>在该yaml文件目录下启动docker-composer容器配置：docker-composer up -d</li><li>docker ps确认容器有没有启动</li><li>启动MongoDB咯：docker run mongo 或者 docker exec -it 容器ID (我是喜欢用这个)</li></ul><p>推荐直接使用：docker exec -it 容器ID mongo admin，这个时候我们数据库的操作会发现没有权限，这个问题刚开始困扰我很久，因为是新手。后来发现实际上是因为我们连接之后没有鉴权，我们需要使用一个身份去鉴权，也就是我们docker-composer里的root用户，所以我们需要：db.auth(“root”,”123456”) ,这样就代表鉴权成功，可以继续操作curd了。</p><p>简单的操作失败信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> use admin</span><br><span class="line">switched to db admin</span><br><span class="line"><span class="meta">&gt;</span> db</span><br><span class="line">admin</span><br><span class="line"><span class="meta">&gt;</span> db.createCollection("test")</span><br><span class="line">&#123;</span><br><span class="line">"ok" : 0,</span><br><span class="line">"errmsg" : "command create requires authentication",</span><br><span class="line">"code" : 13,</span><br><span class="line">"codeName" : "Unauthorized"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显提示没有权限操作咯</p><h3 id="命令行基础命令"><a href="#命令行基础命令" class="headerlink" title="命令行基础命令"></a>命令行基础命令</h3><ul><li>show dbs :显示已有数据库，如果你刚安装好，会默认有local、admin(config)，这是MongoDB的默认数据库，我们在新建库时是不允许起这些名称的。</li><li>use admin： 进入数据，也可以理解成为使用数据库。成功会显示：switched to db admin。</li><li>show collections: 显示数据库中的集合（关系型中叫表，我们要逐渐熟悉）。</li><li><p>db:显示当前位置，也就是你当前使用的数据库名称，这个命令算是最常用的，因为你在作任何操作的时候都要先查看一下自己所在的库，以免造成操作错误。</p></li><li><p>use db（建立数据库）：use不仅可以进入一个数据库，如果你敲入的库不存在，它还可以帮你建立一个库。但是在没有集合前，它还是默认为空。</p></li><li>db.集合.insert( ):新建数据集合和插入文件（数据），当集合没有时，这时候就可以新建一个集合，并向里边插入数据。Demo：db.user.insert({ “name”:”jacky”,”hobby”:”唱、跳、rap、篮球”});</li><li>db.集合.find( ):查询所有数据，这条命令会列出集合下的所有数据，可以看到MongoDB是自动给我们加入了索引值的。Demo：db.user.find()</li><li>db.集合.findOne( ):查询第一个文件数据，这里需要注意的，所有MongoDB的组合单词都使用首字母小写的驼峰式写法。</li><li><p>db.集合.update({查询},{修改}):修改文件数据，第一个是查询条件，第二个是要修改成的值。这里注意的是可以多加文件数据项的，比如下面的例子。</p></li><li><p>db.集合.remove(条件)：删除文件数据，注意的是要跟一个条件。Demo: db.user.remove({<br>… “name”:”mike”}<br>… );</p></li><li>db.集合.drop( ):删除整个集合，这个在实际工作中一定要谨慎使用，如果是程序，一定要二次确认。</li><li>db.dropDatabase( ):删除整个数据库，在删除库时，一定要先进入数据库，然后再删除。实际工作中这个基本不用，实际工作可定需要保留数据和痕迹的</li></ul><p><img src="http://img.binzhizhu.top/imgs/2019/06/9b137700ebf6ea6a.jpg" alt=""></p><h3 id="使用JavaScript敲打MongoDB命令"><a href="#使用JavaScript敲打MongoDB命令" class="headerlink" title="使用JavaScript敲打MongoDB命令"></a>使用JavaScript敲打MongoDB命令</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;非关系型数据库-NoSql-：MongoDB&quot;&gt;&lt;a href=&quot;#非关系型数据库-NoSql-：MongoDB&quot; class=&quot;headerlink&quot; title=&quot;非关系型数据库(NoSql)：MongoDB&quot;&gt;&lt;/a&gt;非关系型数据库(NoSql)：Mongo
      
    
    </summary>
    
    
      <category term="MongoDB" scheme="http://binzhizhu.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>Shell学习笔记</title>
    <link href="http://binzhizhu.github.io/2019/06/23/Shell%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://binzhizhu.github.io/2019/06/23/Shell学习笔记/</id>
    <published>2019-06-23T15:20:46.000Z</published>
    <updated>2019-06-23T15:27:50.018Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Shell命令"><a href="#Shell命令" class="headerlink" title="Shell命令"></a>Shell命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>变量名:不需要使用$符号，"="不能有空格</span><br><span class="line">my_name="BinZhiZhu"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>输出:需要$符号</span><br><span class="line">echo $my_name</span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#单引号</span></span><br><span class="line"></span><br><span class="line">str=<span class="string">'I try to learn shell '</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$str</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#双引号:可以有变量,可以有转义字符</span></span><br><span class="line"></span><br><span class="line">str=<span class="string">"My name is \"<span class="variable">$my_name</span>\",Nice to meet u"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$str</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#拼接</span></span><br><span class="line"></span><br><span class="line">str1=<span class="string">"What's ur name,bro? My name is "</span><span class="variable">$my_name</span><span class="string">"!"</span></span><br><span class="line"></span><br><span class="line">str2=<span class="string">"What's ur name,bro? My name is "</span>&#123;<span class="variable">$my_name</span>&#125;<span class="string">"!"</span></span><br><span class="line"></span><br><span class="line">str3=<span class="string">"What's ur name,bro? My name is &#123;<span class="variable">$my_name</span>&#125;!"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$str1</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$str2</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$str3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取长度:$&#123;# + 变量&#125;</span></span><br><span class="line"></span><br><span class="line">str=<span class="string">'qwer'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#str&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#提取子字符串:</span></span><br><span class="line"></span><br><span class="line">str=<span class="string">"my name is <span class="variable">$my_name</span> "</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#提取名字：BinZhiZhu</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;str:11&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#提取指定索引范围:name</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;str:3:5&#125;</span></span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#括号括起来 元素之间用空格相隔</span></span><br><span class="line">array=(a b c d)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#可以直接赋值</span></span><br><span class="line">array1[0]=1</span><br><span class="line">array1[1]=2</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"所有元素为：<span class="variable">$&#123;array[*]&#125;</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"第一个元素为：<span class="variable">$&#123;array[0]&#125;</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"第二个元素为：<span class="variable">$&#123;array[1]&#125;</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"第三个元素为：<span class="variable">$&#123;array[2]&#125;</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"第四个元素为：<span class="variable">$&#123;array[3]&#125;</span>"</span></span><br></pre></td></tr></table></figure><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><h3 id="if的使用"><a href="#if的使用" class="headerlink" title="if的使用"></a>if的使用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">运算符 : -gt:大于; -lt:小于; -eq:等于</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="keyword">if</span>使用</span></span><br><span class="line"></span><br><span class="line">a=6</span><br><span class="line">b=4</span><br><span class="line"></span><br><span class="line">if [ $a -gt $b ]</span><br><span class="line">then</span><br><span class="line">     echo "a大于b咯"</span><br><span class="line">elif [ $a -eq $b ]</span><br><span class="line">then</span><br><span class="line">     echo "a等于b咯"</span><br><span class="line">elif [ $a -lt $b ]</span><br><span class="line">then</span><br><span class="line">     echo "a小于b咯"</span><br><span class="line">else</span><br><span class="line">     echo "没有找到该条件判断"</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">test</span>命令</span></span><br><span class="line"></span><br><span class="line">let num1=2*3</span><br><span class="line">let num2=3+3</span><br><span class="line"></span><br><span class="line">if test $num1 -eq $num2</span><br><span class="line">then</span><br><span class="line">    echo '两个数字相等!'</span><br><span class="line">else</span><br><span class="line">    echo '两个数字不相等!'</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">等价于</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">let num3=2*3</span><br><span class="line">let num4=3+2</span><br><span class="line"></span><br><span class="line">if [ $num3 -eq $num4 ]</span><br><span class="line">then</span><br><span class="line">    echo '两个数字相等!'</span><br><span class="line">else</span><br><span class="line">    echo '两个数字不相等!'</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">arr=(1 2 3 4)</span><br><span class="line">for loop in $&#123;arr[*]&#125;</span><br><span class="line">do</span><br><span class="line">    echo "The Number is: $loop"</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">写成一行</span></span><br><span class="line">for loop in $&#123;arr[*]&#125;;do echo "Number is: $loop";done;</span><br></pre></td></tr></table></figure><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">当num小于等于5条件为<span class="literal">true</span></span></span><br><span class="line">num=1</span><br><span class="line"></span><br><span class="line"><span class="meta">while(($</span><span class="bash">num &lt;= 5 ))</span></span><br><span class="line">do</span><br><span class="line">   echo "num is:$num"</span><br><span class="line">   let num++</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">读取键盘信息</span></span><br><span class="line"></span><br><span class="line">echo '按下 &lt;CTRL-D&gt; 退出'</span><br><span class="line">echo -n '输入你最喜欢的网站名: '</span><br><span class="line">while read FILM</span><br><span class="line">do</span><br><span class="line">    echo "是的！$FILM 是一个好网站"</span><br><span class="line">    break</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h4 id="until循环"><a href="#until循环" class="headerlink" title="until循环"></a>until循环</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">until 循环执行一系列命令直至条件为 <span class="literal">true</span> 时停止，与<span class="keyword">while</span>相反</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">输入1-10数字咯</span></span><br><span class="line">a=0</span><br><span class="line">b=10</span><br><span class="line"></span><br><span class="line">until [ $a -eq $b ]</span><br><span class="line">do</span><br><span class="line">    echo " value is : $a"</span><br><span class="line">    let a++</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h4 id="case循环"><a href="#case循环" class="headerlink" title="case循环"></a>case循环</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="keyword">esac</span>的意思与<span class="keyword">case</span>相反 也就是结束执行</span></span><br><span class="line">echo "case 循环"</span><br><span class="line"></span><br><span class="line">echo '输入 1 到 4 之间的数字:'</span><br><span class="line">echo '你输入的数字为:'</span><br><span class="line">read aNum</span><br><span class="line">case $aNum in</span><br><span class="line">    1)  echo '你选择了 1'</span><br><span class="line">    ;;</span><br><span class="line">    2)  echo '你选择了 2'</span><br><span class="line">    ;;</span><br><span class="line">    3)  echo '你选择了 3'</span><br><span class="line">    ;;</span><br><span class="line">    4)  echo '你选择了 4'</span><br><span class="line">    ;;</span><br><span class="line">    *)  echo '你没有输入 1 到 4 之间的数字'</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#输入 1 到 5 之间的数字才可结束循环</span></span></span><br><span class="line">while :</span><br><span class="line">do</span><br><span class="line">    echo -n "输入 1 到 5 之间的数字:"</span><br><span class="line">    read aNum</span><br><span class="line">    case $aNum in</span><br><span class="line">        1|2|3|4|5) echo "你输入的数字为 $aNum!"</span><br><span class="line">        ;;</span><br><span class="line">        *) echo "你输入的数字不是 1 到 5 之间的! 游戏结束"</span><br><span class="line">            break</span><br><span class="line">        ;;</span><br><span class="line">    esac</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="DOC"><a href="#DOC" class="headerlink" title="DOC"></a>DOC</h2><p>[github-shell学习笔记]  <a href="https://github.com/BinZhiZhu/Shell_study_notes" target="_blank" rel="noopener">https://github.com/BinZhiZhu/Shell_study_notes</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Shell命令&quot;&gt;&lt;a href=&quot;#Shell命令&quot; class=&quot;headerlink&quot; title=&quot;Shell命令&quot;&gt;&lt;/a&gt;Shell命令&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
      
    
    </summary>
    
    
      <category term="Shell" scheme="http://binzhizhu.github.io/tags/Shell/"/>
    
      <category term="Linux" scheme="http://binzhizhu.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>想自己独立开发个小程序咯~</title>
    <link href="http://binzhizhu.github.io/2019/06/20/%E6%83%B3%E8%87%AA%E5%B7%B1%E7%8B%AC%E7%AB%8B%E5%BC%80%E5%8F%91%E4%B8%AA%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%92%AF/"/>
    <id>http://binzhizhu.github.io/2019/06/20/想自己独立开发个小程序咯/</id>
    <published>2019-06-20T15:12:14.000Z</published>
    <updated>2019-06-20T15:19:08.883Z</updated>
    
    <content type="html"><![CDATA[<h2 id="想法从而而来"><a href="#想法从而而来" class="headerlink" title="想法从而而来"></a>想法从而而来</h2><p>主要是做开发这么久了，自己还没有一个完整的独立开发的项目。有机会接触了几个月的Taro多端编译型框架的开发，语法是基于react的，所以开发起来也比较舒服，一次编码多端可见。所以突然琢磨了一下，抓一下空闲时间自己独立开发个小程序，但是缺少想法，不知道搞啥，今晚刚刚搞了个demo，因为太无聊，然后v站发了个帖子问问大家，交流下意见咯。h5撸了两个页面，主要是展示下组件而已，然后小程序预览了一下，不得不说Taro 是真的NB,几乎是没有差别的。</p><p><img src="http://img.binzhizhu.top/imgs/2019/06/8c2dd7e1d22b3078.jpeg" alt=""></p><p>贴一些交流的帖子吧 有好的想法才会有目标去完成。。希望自己能够坚持吧 </p><p>[ v站交流帖子 ]：<a href="https://www.v2ex.com/t/576014#reply0" target="_blank" rel="noopener">https://www.v2ex.com/t/576014#reply0</a></p><p>Fighting <del>~</del> 冲鸭</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;想法从而而来&quot;&gt;&lt;a href=&quot;#想法从而而来&quot; class=&quot;headerlink&quot; title=&quot;想法从而而来&quot;&gt;&lt;/a&gt;想法从而而来&lt;/h2&gt;&lt;p&gt;主要是做开发这么久了，自己还没有一个完整的独立开发的项目。有机会接触了几个月的Taro多端编译型框架的开发，
      
    
    </summary>
    
    
      <category term="感悟" scheme="http://binzhizhu.github.io/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>毕业一年，回首大学时光</title>
    <link href="http://binzhizhu.github.io/2019/06/16/%E6%AF%95%E4%B8%9A%E4%B8%80%E5%B9%B4%EF%BC%8C%E5%9B%9E%E9%A6%96%E5%A4%A7%E5%AD%A6%E6%97%B6%E5%85%89/"/>
    <id>http://binzhizhu.github.io/2019/06/16/毕业一年，回首大学时光/</id>
    <published>2019-06-16T15:34:30.000Z</published>
    <updated>2019-06-17T15:15:24.962Z</updated>
    
    <content type="html"><![CDATA[<p>距离毕业已经将一年，我其实并不是很擅长写回忆这一类的东西，但是在这个时间节点，以及此时此刻，内心驱使着我去回忆一些过往。  </p><h2 id="大一，我过得很孤僻"><a href="#大一，我过得很孤僻" class="headerlink" title="大一，我过得很孤僻"></a>大一，我过得很孤僻</h2><h3 id="高考失利"><a href="#高考失利" class="headerlink" title="高考失利"></a>高考失利</h3><p>我是2014届的，当年高考成绩对我的打击很大，但是我又不能不去接受这个事实。  为什么要这么说？当你高考失利的时候，无非有两种选择：1.复读；2.接受。我是属于后者，因为复读对于我来说是一个很长很长的噩梦，我是一个很难控制自己的情绪的人，可能我此时此刻我很有自信的说：下次我一定会考得比之前好。但是复读是一场持久战，我会觉得很折磨，我的抗压能力很差，所以我选择了后者。当然前者讨论的仅仅是选择性的问题，而我选择了后者，所以我又不得不接受后者产生的一系列问题。不复读的话，意味着尽可能的选择一个相对较好的学校以及专业，很遗憾，好的东西总是与我擦肩而过。我是第三志愿被录取的，虽晚专业不是调剂，但是结果让我很不满意：广州郊区(山卡拉)的某所三本本科独立院校，其实就是烧钱拿个本科文凭，美名其曰”独立学院”。</p><h3 id="开学前，遭遇了一场车祸"><a href="#开学前，遭遇了一场车祸" class="headerlink" title="开学前，遭遇了一场车祸"></a>开学前，遭遇了一场车祸</h3><p>那也是异常噩梦，跟朋友骑车去游泳的途中，拐弯的时候为了躲闪一辆大车，撞到了路旁的护栏，当时从车上摔下来与地面摩擦大概有2~3米的距离。幸运的是是自己摔倒，并没有与其他车辆发生撞击而摔倒，否则的话，后果不堪设想。  </p><p>我记得当时爬起来的时候，大家都还有知觉。也不觉得身体有疼痛感，但是手、脚多处擦伤严重，慢慢的我的身体就开始疼痛起来，甚至几度趋于昏迷的状态，这也是因为流血导致的轻微昏迷的状态。我记得当时有那么一刻我的眼睛是看不到的，我当时以为我要瞎了，吓得我哭了起来。那会应该是差不多开学的时候，所以发生了这么一个事情，回到家里，受尽了长辈们的批评与责骂，不过这也是应该的，我也很后悔当时跟着去游泳。跟学校领导请了半个月的假期，当时其实身体并没有完全恢复，是我自己要求提去学校报到的，因为我想参与军训。我是一个很感性的人，认为如果念大学没有经历过军训的洗礼，我会觉得失去了大学的色彩。其实我刚去那会，学校已经军训一个星期左右了，我就是带着这样的一种身体与情绪去大学报到的，现在回想起来还挺特别的，但仔细想想其实是可悲的。</p><h3 id="与班集体脱节"><a href="#与班集体脱节" class="headerlink" title="与班集体脱节"></a>与班集体脱节</h3><p>经历了那么多的事情，我回到了学校。因为是延迟报到，所以我被分到了一个混合宿舍，并不是跟自己班里的人住在一起。当时觉得对自己不公平，现在想起来：一切都是最好的安排。  </p><p>报到那会是我爸还有他的一个朋友开着家里的农民车皮卡载我来学校的。宿舍是六人宿舍，就差我一人，后来知道4名是外国语英德双语专业的，还有一名是跟我同系不同专业的。因为我是后面来的，他们已经军训一个星期多了，所以队形队列都是已经拍好了的，哪个方队多少人等等，我还是被安排到了与其他班级一起军训。这就是我为什么说的与班集体脱节，因为宿舍是混合宿舍，军训也是跟其他班级人一起，我基本没什么机会与班级的人产生沟通与交流，那会觉得挺压抑的。毕竟那会是刚刚步入大学，青涩的脸庞，内敛的性格，加上被分配到这么一种环境，对我来说还是有点阻碍的。不过，好在我会自觉主动的去与人沟通，这一点我觉得我还是做得比较好的。军训跟其他班级的一起，慢慢的也会认识一些”战友”，逐渐的就融入了进去。对于班级来说，那会我们一早一晚是要上晚自习的，说起来也是挺尴尬的，挺孤僻的。因为我是混合宿舍，宿舍楼都不是跟同系的人在一个地方，所以我上课都是一个人去的，别人都是一个一个宿舍去上晚自习，而我刚开始都是自己一个人去的，不过还好我还有一个同系的舍友，后来就偶尔会一起去，刚好也有个伴。</p><h3 id="大一生活"><a href="#大一生活" class="headerlink" title="大一生活"></a>大一生活</h3><p>随着时间的推移，自己也逐步的适应了大学生活。军训完美的结束，我并没有缺席，跟大家一样，我也拥有了自己大学四年的舍友、老师、同学。后来的生活基本都是一个调调：上课、吃饭、社团。我大一加入了好几个社团：</p><ul><li>计算机协会； </li><li>吉他协会；  </li><li>青年志愿者协会；  </li></ul><p>后来大多数的时间都在青年志愿者协会，因为那里的人比较有趣，而且能够做一些力所能及、对社会有益的事情。</p><h2 id="大二，我是一个”部长”"><a href="#大二，我是一个”部长”" class="headerlink" title="大二，我是一个”部长”"></a>大二，我是一个”部长”</h2><p>大二应该说是玩的最嗨的一年。</p><h2 id="大三，我是一个”助理辅导员”"><a href="#大三，我是一个”助理辅导员”" class="headerlink" title="大三，我是一个”助理辅导员”"></a>大三，我是一个”助理辅导员”</h2><p>  // TODO </p><h2 id="大四，我是一个”优秀毕业生”"><a href="#大四，我是一个”优秀毕业生”" class="headerlink" title="大四，我是一个”优秀毕业生”"></a>大四，我是一个”优秀毕业生”</h2><p>// TODO</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;距离毕业已经将一年，我其实并不是很擅长写回忆这一类的东西，但是在这个时间节点，以及此时此刻，内心驱使着我去回忆一些过往。  &lt;/p&gt;
&lt;h2 id=&quot;大一，我过得很孤僻&quot;&gt;&lt;a href=&quot;#大一，我过得很孤僻&quot; class=&quot;headerlink&quot; title=&quot;大一，我
      
    
    </summary>
    
    
      <category term="感悟" scheme="http://binzhizhu.github.io/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>cypress-file-upload真的香</title>
    <link href="http://binzhizhu.github.io/2019/06/06/cypress-file-upload%E7%9C%9F%E7%9A%84%E9%A6%99/"/>
    <id>http://binzhizhu.github.io/2019/06/06/cypress-file-upload真的香/</id>
    <published>2019-06-06T13:14:30.000Z</published>
    <updated>2019-06-07T01:22:20.568Z</updated>
    
    <content type="html"><![CDATA[<h2 id="cypress-file-upload-是什么"><a href="#cypress-file-upload-是什么" class="headerlink" title="cypress-file-upload 是什么"></a>cypress-file-upload 是什么</h2><p>之前有写过一遍博客大致介绍了cypress是什么：前端e2e测试框架(歪果仁开发)。  </p><p>最近因为有个项目因为改版的原因，差不多到上线的节点了，所以还是希望把测试维护起来。e2e实际上就是end to end 嘛，你如果直接理解为验收测试也不为过。众所周知咯，维护前端测试实际上是一件很麻烦的事情，因为有复杂的业务、复杂的UI交互，人工测试实在是太耗时费力(成本)，另外前端项目是比较不那么stable 的。因为前端样式是可能时常变化的，今天断言的这个按钮是红色、明天可能是白色了。所以对于小型公司来说的话，建议是在一个stable 的阶段去维护比较有收益，最近的项目改版就是一个有力的例子。V1版本维护了一套stable的测试用例，突然说需要改版，基本是换肤，对于UI来说基本是不一致的了，这导致之前维护的版本的测试基本是需要重新维护的了。</p><h2 id="为什么要使用cypress-file-upload"><a href="#为什么要使用cypress-file-upload" class="headerlink" title="为什么要使用cypress-file-upload"></a>为什么要使用cypress-file-upload</h2><p>前端很多场景是需要上传文件的，最通常的就是上传图片。也就是说我们写测试的过程中，例如填写一个表单，需要上传图片，然后才能提交到后台。所以我们是需要模拟上传图片的，简单来说就是把这个事情自动化，本来我们就是自动化测试嘛。之前也写过一些cypress简单的用例，但是上传图片之前没去琢磨过，于是我就去gayhub疯狂的search issues ，大致关键词就是：”cypress how to upload file”。果不其然，还是挺多歪果仁提过这个issue的，所以我就大致认真的看了一下，因为都是英文，所以还是得认真的去消化 ：）。我发现了一个关键的issue：<a href="https://github.com/cypress-io/cypress/issues/170" target="_blank" rel="noopener">https://github.com/cypress-io/cypress/issues/170</a>  然后摸石头过河，发现有些朋友贴出的好的idea ：cypress-file-upload , 直接npm install - -save -dev cypress-file-upload 就可以，具体可以直接Google咯。</p><p>首先先 npm 安装 cypress-file-upload 哦</p><p>大致的用法是，这里贴一下代码块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> *  上传图片 【自己封了一层】</span><br><span class="line"> *</span><br><span class="line"> *  参考  https://github.com/cypress-io/cypress/issues/170</span><br><span class="line"> */</span><br><span class="line">Cypress.Commands.add(&apos;uploadFile&apos;, (fileName, fileType, selector,subjectType) =&gt; &#123;</span><br><span class="line">  cy.fixture(fileName).then(fileContent =&gt; &#123;</span><br><span class="line">    // console.log(&apos;fileContent&apos;,fileContent)</span><br><span class="line">    cy.get(selector).upload(</span><br><span class="line">      &#123; fileContent, fileName, mimeType: fileType &#125;,</span><br><span class="line">      &#123; subjectType: subjectType &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   //模拟图片上传</span><br><span class="line">    const fileName = &apos;images/logo.png&apos;;</span><br><span class="line">    const fileType = &apos;image/png&apos;;</span><br><span class="line">    const subjectType = &apos;input&apos;;</span><br><span class="line">    const selector = &apos;input[type=&quot;file&quot;]&apos;</span><br><span class="line"></span><br><span class="line">    cy.uploadFile(fileName,fileType,selector,subjectType)</span><br></pre></td></tr></table></figure><p>有几点注意的：</p><ol><li>uploadFile是自己封装的func，需要统一放在commands.js [官方提供的diy func]</li><li>此时直接使用cy.get(…).upload(‘’) 是会报错的 找不到upload 方法，我们需要在commands.js 引入 import ‘cypress-file-upload’ ，之前我也以为npm 安装了即可，但是后来去gayhub 发现需要在commands import一次</li></ol><p>最后大功告成咯 ： ）  ci 上跑了一波 没啥问题 大功告成 cypress真的香哦 </p><video src="/Users/apple/Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat/2.0b4.0.9/2ae4ac7ee7b52045568b2f00f252714c/Message/MessageTemp/f86605ec697634cf912542f2dc13a2a1/Video/master_certify_center.js_1559822306858595.mp4"></video>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;cypress-file-upload-是什么&quot;&gt;&lt;a href=&quot;#cypress-file-upload-是什么&quot; class=&quot;headerlink&quot; title=&quot;cypress-file-upload 是什么&quot;&gt;&lt;/a&gt;cypress-file-uplo
      
    
    </summary>
    
    
      <category term="cypress，测试" scheme="http://binzhizhu.github.io/tags/cypress%EF%BC%8C%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>熬夜在VPS简单搭了个frp内网穿透web服务</title>
    <link href="http://binzhizhu.github.io/2019/05/02/%E7%86%AC%E5%A4%9C%E5%9C%A8VPS%E7%AE%80%E5%8D%95%E6%90%AD%E4%BA%86%E4%B8%AAfrp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8Fweb%E6%9C%8D%E5%8A%A1/"/>
    <id>http://binzhizhu.github.io/2019/05/02/熬夜在VPS简单搭了个frp内网穿透web服务/</id>
    <published>2019-05-02T03:56:22.000Z</published>
    <updated>2019-05-02T03:59:37.870Z</updated>
    
    <content type="html"><![CDATA[<h2 id="搭建成功"><a href="#搭建成功" class="headerlink" title="搭建成功 : )"></a>搭建成功 : )</h2><p><a href="http://ww1.sinaimg.cn/large/00655MmOgy1g2mbbs6c3nj31gc13qkjl.jpg" target="_blank" rel="noopener">http://ww1.sinaimg.cn/large/00655MmOgy1g2mbbs6c3nj31gc13qkjl.jpg</a></p><h2 id="回顾一下"><a href="#回顾一下" class="headerlink" title="回顾一下"></a>回顾一下</h2><p>小白前几天发了一个帖子，简单调研了一下大佬们平时用服务器来干啥，大多数的答案基本如下：<br>1.闲置、吃灰<br>2.搭梯子、frp 内网穿透<br>3.测试服务器<br>4.API 调用<br>5.等等更加高级的玩法<br>这里贴一下之前的帖子 <a href="https://www.v2ex.com/t/559909#reply93" target="_blank" rel="noopener">https://www.v2ex.com/t/559909#reply93</a></p><h2 id="为什么瞎几把搞"><a href="#为什么瞎几把搞" class="headerlink" title="为什么瞎几把搞"></a>为什么瞎几把搞</h2><p>然后我琢磨了一下，觉得吃灰的话还不如自己搭一个内网穿透，也就是大家口中说的 frp 咯。<br>之前我毕业前实习的时候做开发是用花钱去买市场上的一些内网穿透的产品，之前用的是 natapp，开始用免费的。<br>结果可想而知，那速度慢的一批。于是买了个 10 元 /月的套餐，流量勉强还能接受吧，基本用于微信开发，大家知道的啦，sbox 沙盒那边配置一下开发起来以及测试比较方便，免得每次都得更新到线上才可以测试，或者说更新到测试服务器，这样开销有点大，所以那会就这样搞。后来业务逐渐少了，自己也买了个阿里云的小学机，虽然尿管，但是自己搭搭博客还是🆗的。这里就不扯淡了，有点丢人，这里高手如云，大家给个面子。  </p><h2 id="瞎几把搞"><a href="#瞎几把搞" class="headerlink" title="瞎几把搞"></a>瞎几把搞</h2><p>搭建这个 frp 的公网服务器我是选择了我闲置吃灰的 VPS,搬瓦工买的，$19.99/year。现在估计玩蛇了，上次看了一下，有点贵了，我有点怕不能续费。那么平时只是翻墙，所以打算就拿它开刀呗。</p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ul><li>公网服务器安装最新版本的 release，根据 arch。  </li><li>配置 frps.ini</li><li>测试连接</li><li>内网同样安装相同版本的 frp</li><li>配置 frpc.ini （注意端口统一的问题）</li><li>阿里云添加一个新的域名</li><li>域名解析到自己的公网 ip</li><li>由于要让外网访问到内网，所以在服务器增加一个虚拟域名。（ root 填自己内网的项目地址即可）</li><li>内网测试连接</li><li>收工</li></ul><p>其实过程中遇到一些小问题，官方 issue 也很多人提到过，类似于：<br><code>[W] [service.go:82] login to server failed: dial tcp xxx.xxx.xxx.xxx:7000: connect: connection timed out</code></p><p>交流贴，纯粹跟大家分享一下，并不是炫技哈~~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;搭建成功&quot;&gt;&lt;a href=&quot;#搭建成功&quot; class=&quot;headerlink&quot; title=&quot;搭建成功 : )&quot;&gt;&lt;/a&gt;搭建成功 : )&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://ww1.sinaimg.cn/large/00655MmOgy1g2mbbs
      
    
    </summary>
    
    
      <category term="frp" scheme="http://binzhizhu.github.io/tags/frp/"/>
    
  </entry>
  
  <entry>
    <title>CSS BEM 书写规范</title>
    <link href="http://binzhizhu.github.io/2019/04/20/CSS-BEM-%E4%B9%A6%E5%86%99%E8%A7%84%E8%8C%83/"/>
    <id>http://binzhizhu.github.io/2019/04/20/CSS-BEM-书写规范/</id>
    <published>2019-04-20T14:07:48.000Z</published>
    <updated>2019-04-20T14:09:15.933Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BEM命名约定"><a href="#BEM命名约定" class="headerlink" title="BEM命名约定"></a>BEM命名约定</h2><hr><p>使用 <a href="http://bem.info/" target="_blank" rel="noopener">BEM</a> 命名规范，理论上讲，每行 <code>css</code> 代码都只有一个选择器。</p><p>BEM代表 <strong>“块（block）,元素（element）,修饰符（modifier）”</strong>,我们常用这三个实体开发组件。</p><p>在选择器中，由以下三种符号来表示扩展的关系：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-   中划线 ：仅作为连字符使用，表示某个块或者某个子元素的多单词之间的连接记号。</span><br><span class="line">__  双下划线：双下划线用来连接块和块的子元素</span><br><span class="line">_   单下划线：单下划线用来描述一个块或者块的子元素的一种状态</span><br><span class="line"></span><br><span class="line">type-block__element_modifier</span><br></pre></td></tr></table></figure><h3 id="块（block）"><a href="#块（block）" class="headerlink" title="块（block）"></a>块（block）</h3><p>一个块是设计或布局的一部分，它有具体且唯一地意义 ，要么是语义上的要么是视觉上的。</p><p>在大多数情况下，任何独立的页面元素（或复杂或简单）都可以被视作一个块。它的HTML容器会有一个唯一的CSS类名，也就是这个块的名字。</p><p>针对块的CSS类名会加一些前缀（ <code>ui-</code>），这些前缀在CSS中有类似 <a href="https://github.com/Tencent/tmt-workflow/wiki/%E2%92%9B-%5B%E8%A7%84%E8%8C%83%5D--CSS-BEM-%E4%B9%A6%E5%86%99%E8%A7%84%E8%8C%83" target="_blank" rel="noopener">命名空间</a> 的作用。</p><p>一个块的正式（实际上是半正式的）定义有下面三个基本原则：</p><ol><li>CSS中只能使用类名（不能是ID）。</li><li>每一个块名应该有一个命名空间（前缀）</li><li>每一条CSS规则必须属于一个块。</li></ol><p>例如：一个自定义列表 <code>.list</code> 是一个块，通常自定义列表是算在 <code>mod</code> 类别的，在这种情况下，一个 <code>list</code> 列表的block写法应该为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.list</span><br></pre></td></tr></table></figure><h3 id="元素（element）"><a href="#元素（element）" class="headerlink" title="元素（element）"></a>元素（element）</h3><p>块中的子元素是块的子元素，并且子元素的子元素在 <code>bem</code> 里也被认为是块的直接子元素。<strong>一个块中元素的类名必须用父级块的名称作为前缀。</strong></p><p>如上面的例子，<code>li.item</code> 是列表的一个子元素，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.list&#123;&#125;</span><br><span class="line">.list .item&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.list&#123;&#125;</span><br><span class="line">.list__item&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="修饰符（modifier）"><a href="#修饰符（modifier）" class="headerlink" title="修饰符（modifier）"></a>修饰符（modifier）</h3><p>一个“修饰符”可以理解为一个块的特定状态，标识着它持有一个特定的属性。</p><p>用一个例子来解释最好不过了。一个表示按钮的块默认有三个大小：小，中，大。为了避免创建三个不同的块，最好是在块上加修饰符。这个修饰符应该有个名字（比如：<code>size</code> ）和值（ <code>small</code>，<code>normal</code> 或者 <code>big</code> ）。</p><p>如上面的例子中，表示一个选中的列表，和一个激活的列表项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.list&#123;&#125;</span><br><span class="line">.list.select&#123;&#125;</span><br><span class="line">.list .item&#123;&#125;</span><br><span class="line">.list .item.active&#123;&#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">.list&#123;&#125;</span><br><span class="line">.list_select&#123;&#125;</span><br><span class="line">.list__item&#123;&#125;</span><br><span class="line">.list__item_active&#123;&#125;</span><br></pre></td></tr></table></figure><h1 id="LESS-书写规范"><a href="#LESS-书写规范" class="headerlink" title="LESS 书写规范"></a>LESS 书写规范</h1><p>使用 <code>.less</code> 后缀的文件来存储变量、混合代码以及最终合并压缩。</p><table><thead><tr><th>子less</th><th>注解</th></tr></thead><tbody><tr><td><code>lib-base.less</code></td><td>预定义的变量，例如颜色、字号、字体</td></tr><tr><td><code>lib-mixins.less</code></td><td>用于混合的代码，例如渐变、半透明的混合</td></tr><tr><td><code>lib-reset.less</code></td><td>初始化</td></tr><tr><td><code>lib-ui.less</code></td><td>颗粒化ui功能</td></tr><tr><td><code>xxx.less</code></td><td>模块样式</td></tr></tbody></table><p><code>.less</code> 文件的引用顺序会对最终编译的样式的作用域和优先级产生影响，请尽量按照由底层到自定义的顺序来引用。</p><h2 id="关于风格"><a href="#关于风格" class="headerlink" title="关于风格"></a>关于风格</h2><h2 id="书写原则"><a href="#书写原则" class="headerlink" title="书写原则"></a>书写原则</h2><h5 id="1-原则上不会出现2层以上选择器嵌套"><a href="#1-原则上不会出现2层以上选择器嵌套" class="headerlink" title="1. 原则上不会出现2层以上选择器嵌套"></a>1. 原则上不会出现<code>2层以上</code>选择器嵌套</h5><p>使用<code>BEM</code>原则，用命名来解耦，所有类名都为一层，增加效率和复用性</p><h5 id="2-两层选择器嵌套出现在-mod-xxx-item-current子元素的情况，如下："><a href="#2-两层选择器嵌套出现在-mod-xxx-item-current子元素的情况，如下：" class="headerlink" title="2. 两层选择器嵌套出现在.mod-xxx__item_current子元素的情况，如下："></a>2. 两层选择器嵌套出现在<code>.mod-xxx__item_current</code>子元素的情况，如下：</h5><p>使用<strong>推荐</strong>的嵌套写法</p><p><strong>常规写法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.xxx&#123;&#125;</span><br><span class="line">.xxx__item&#123;&#125;</span><br><span class="line">.xxx__item_current&#123;&#125;</span><br><span class="line">// 嵌套写法</span><br><span class="line">.xxx__item_current .mod-xxx__link&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>推荐：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.xxx&#123;&#125;</span><br><span class="line">.xxx__item&#123;&#125;</span><br><span class="line">.xxx__item_hightlight&#123;&#125;</span><br><span class="line">.xxx__product-name&#123;&#125;</span><br><span class="line">.xxx__link&#123;&#125;</span><br><span class="line">.xxx__ming-zi-ke-yi-hen-chang&#123;&#125;</span><br><span class="line"></span><br><span class="line">// 嵌套写法</span><br><span class="line">.xxx__item_current&#123;</span><br><span class="line">    .xxx__link&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的HTML结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul class=&quot;xxx&quot;&gt;</span><br><span class="line">    &lt;li class=&quot;xxx__item&quot;&gt;第一项</span><br><span class="line">        &lt;div class=&quot;xxx__product-name&quot;&gt;我是名称&lt;/div&gt;</span><br><span class="line">        &lt;span class=&quot;xxx__ming-zi-ke-yi-hen-chang&quot;&gt;看类名&lt;/span&gt;</span><br><span class="line">        &lt;a href=&quot;#&quot; class=&quot;xxx__link&quot;&gt;我是link&lt;/a&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">    &lt;li class=&quot;xxx__item xxx__item_current&quot;&gt;第二项 且 当前选择项</span><br><span class="line">        &lt;div class=&quot;xxx__product-name&quot;&gt;我是名称&lt;/div&gt;</span><br><span class="line">        &lt;a href=&quot;#&quot; class=&quot;xxx__item-link&quot;&gt;我是link&lt;/a&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">    &lt;li class=&quot;xxx__item xxx__item_hightlight&quot;&gt;第三项 且 特殊高亮</span><br><span class="line">         &lt;div class=&quot;xxx__product-name&quot;&gt;我是名称&lt;/div&gt;</span><br><span class="line">        &lt;a href=&quot;#&quot; class=&quot;xxx__item-link&quot;&gt;我是link&lt;/a&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><h2 id="BEM-解决问题"><a href="#BEM-解决问题" class="headerlink" title="BEM 解决问题"></a>BEM 解决问题</h2><p>组件之间的完全解耦，不会造成命名空间的污染，如：<code>.mod-xxx ul li</code> 的写法带来的潜在的嵌套风险。</p><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>BEM 命名会使得 Class 类名变长，但经过 gzip 压缩后这个带宽开销可以忽略不计</p><p>xxx__item_hightlight</p><h2 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h2><ul><li>更新文档只是有利于提高自己开发效率 有版权问题 请联系本人修正。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;BEM命名约定&quot;&gt;&lt;a href=&quot;#BEM命名约定&quot; class=&quot;headerlink&quot; title=&quot;BEM命名约定&quot;&gt;&lt;/a&gt;BEM命名约定&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;使用 &lt;a href=&quot;http://bem.info/&quot; target=&quot;_blank&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MacOS PhpStorm 快捷键</title>
    <link href="http://binzhizhu.github.io/2019/04/20/MacOS-PhpStorm-%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://binzhizhu.github.io/2019/04/20/MacOS-PhpStorm-快捷键/</id>
    <published>2019-04-20T14:04:03.000Z</published>
    <updated>2019-04-20T14:05:09.575Z</updated>
    
    <content type="html"><![CDATA[<p>全局搜索（command + shift + F）</p><p>显示类中的方法 （command + 7）</p><p>函数追踪 （command +鼠标点击）</p><p>单行注释/取消（command + /）</p><p>输入行号跳到某一行（command + l）</p><p>列出打开的文件（command + e）</p><p>删除当前行（command + x）</p><p>复制当前行（command + d）</p><p>跳到变量申明处（command + b）</p><p>格式化代码（command + option + l）</p><p>关闭当前窗口 （command + w）</p><p>项目刷新 （command + option + y）</p><p>多行注释（command + option + /）</p><p>查找//@todo标签（command + 6）</p><p>列出左侧文件（command + 1）</p><p>切换大小写（command + shift + u）</p><p>复制（command + c）</p><p>粘贴（command + v）</p><p>撤销（command + z）</p><p><strong>显示行号</strong></p><p>IDE settings-&gt;Editor-&gt;General-&gt;Appearance-&gt;Show Line Number</p><p><strong>换肤</strong></p><p>IDE settings-&gt;Editor-&gt;Colors &amp; Fonts 下拉框选择即可。</p><p><strong>设置字体大小</strong></p><p>IDE settings-&gt;Editor-&gt;Colors &amp; Fonts-&gt;font 设置即可。</p><p><strong>配置文件头默认注释</strong></p><p>IDE settings-&gt;Editor-&gt;File and Code Templates-&gt;PHP File Header。</p><p><strong>设置注释不顶格</strong></p><p>IDE settings-&gt;Editor-&gt;Code Style-&gt;PHP 去掉勾 Line comment at first column。</p><p><strong>去掉右上角游览器</strong></p><p>IDE settings-&gt;tools -&gt;WebBrowsers  去掉选中即可。</p><p><strong>PHPStorm + CodeSniffer</strong></p><p><strong>设置</strong></p><p>IDE settings-&gt;Languages &amp; Frameworks-&gt;PHP-&gt;CodeSniffer-&gt; 配置即可。</p><p><strong>选择编码规范</strong></p><p>IDE settings-&gt;Editor-&gt;Inspections-&gt;PHP-&gt;PHP Code Sniffer validation(打钩) -&gt;Coding Standard 选择规范（PEAR）</p><h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><ul><li>待更新</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;全局搜索（command + shift + F）&lt;/p&gt;
&lt;p&gt;显示类中的方法 （command + 7）&lt;/p&gt;
&lt;p&gt;函数追踪 （command +鼠标点击）&lt;/p&gt;
&lt;p&gt;单行注释/取消（command + /）&lt;/p&gt;
&lt;p&gt;输入行号跳到某一行（command +
      
    
    </summary>
    
    
      <category term="工具" scheme="http://binzhizhu.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>docker-Compose 相关命令</title>
    <link href="http://binzhizhu.github.io/2019/04/20/docker-Compose-%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
    <id>http://binzhizhu.github.io/2019/04/20/docker-Compose-相关命令/</id>
    <published>2019-04-20T13:52:59.000Z</published>
    <updated>2019-04-20T13:58:58.857Z</updated>
    
    <content type="html"><![CDATA[<p>下面将介绍 <code>docker-compose</code> 子命令的使用。也可以通过运行 <code>docker-compose --help</code>来查看这些信息。</p><ul><li><a href="#build">build</a></li><li><a href="#help">help</a></li><li><a href="#kill">kill</a></li><li><a href="#ps">ps</a></li><li><a href="#restart">restart</a></li><li><a href="#run">run</a></li><li><a href="#start">start</a></li><li><a href="#up">up</a></li><li><a href="#logs">logs</a></li><li><a href="#port">port</a></li><li><a href="#pull">pull</a></li><li><a href="#rm">rm</a></li><li><a href="#scale">scale</a></li><li><a href="#stop">stop</a></li></ul><h3 id="build"><a href="#build" class="headerlink" title="build"></a>build</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">用法：build [options] [SERVICE...]</span><br><span class="line">选项：</span><br><span class="line">--force-rm  总是移除构建过程中产生的中间项容器</span><br><span class="line">--no-cache  构建镜像过程中不使用Cache</span><br><span class="line">--pull      总是尝试获取更新版本的镜像</span><br></pre></td></tr></table></figure><p>构建服务并打上<code>project_service</code>风格的标签（如：<code>composetest_db</code>）。如果你更改了服务的<code>Dockerfile</code>或者构建目录下的内容，需要运行<code>docker-compose build</code>重新构建服务。</p><h3 id="help"><a href="#help" class="headerlink" title="help"></a>help</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用法：help COMMAND</span><br></pre></td></tr></table></figure><p>显示命令的帮助信息及用法教程。</p><h3 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">用法：kill [options] [SERVICE...]</span><br><span class="line">选项：</span><br><span class="line">-s SIGNAL         SIGNAL 是发送给容器的信号量，默认是 SIGKILL</span><br></pre></td></tr></table></figure><p>通过发送<code>SIGKILL</code>信号来强制终止运行中的容器，也可以发送指定的信号量，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose kill -s SIGINT</span><br></pre></td></tr></table></figure><h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">用法：ps [options] [SERVICE...]</span><br><span class="line">选项：</span><br><span class="line">-q仅仅显示容器ID</span><br></pre></td></tr></table></figure><p>列出容器。</p><h3 id="restart"><a href="#restart" class="headerlink" title="restart"></a>restart</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">用法：restart [options] [SERVICE...]</span><br><span class="line">选项：</span><br><span class="line">-t, --timeout TIMEOUT      设置关闭服务的超时时间，单位为秒，默认为10</span><br></pre></td></tr></table></figure><p>重启服务。</p><h3 id="run"><a href="#run" class="headerlink" title="run"></a>run</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">用法：run [options] [-e KEY=VAL...] SERVICE [COMMAND] [ARGS...]</span><br><span class="line">选项：</span><br><span class="line">-d                    分离模式：在后台运行容器，只打印新的容器名称</span><br><span class="line">--entrypoint CMD      覆盖镜像的入口点（CMD ...）</span><br><span class="line">-e KEY=VAL            设置环境变量，可以使用多次</span><br><span class="line">-u, --user=&quot;&quot;         通过指定的用户名或用户id来运行</span><br><span class="line">--no-deps             不启动link连接的服务</span><br><span class="line">--rm                  运行结束后移除容器，在分离模式下将被忽略</span><br><span class="line">-p, --publish=[]      将容器暴露端口映射到主机端口</span><br><span class="line">--service-ports       通过服务映射到主机的端口执行命令</span><br><span class="line">-T                    禁用pseudo-tty分配，默认会分配一个TTY</span><br></pre></td></tr></table></figure><p>对服务运行的命令。例如，以下命令启动web服务并运行bash命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose run web bash</span><br></pre></td></tr></table></figure><p><code>run</code>命令，将使用服务中已经定义的配置来创建运行一个新的容器。也就是说，如此创建的容器，将会使用相同的挂载卷、容器连接等相同的配置，但它们依旧可以存在差异。</p><p>第一个区别是，可以使用<code>run</code>命令覆盖服务中指定的运行命令。例如，<code>web</code>服务中的配置指定的运行命令为<code>bash</code>，那么<code>docker-compose run web python app.py</code>将使用<code>python app.py</code>来覆盖它。</p><p>第二个区别是，<code>docker-compose run</code>命令不会创建任何服务配置中指定的端口映射，这样可以防止多个容器映射同一端口的冲突。如果你需要使得服务的端口创建并映射到主机，需要指定<code>--service-ports</code>标记，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose run --service-ports web python manage.py shell</span><br></pre></td></tr></table></figure><p>或者可以手动指定端口映射，和使用<code>docker run</code>一样，使用<code>--publish</code>或<code>-p</code>选项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose run --publish 8080:80 -p 2022:22 -p 127.0.0.1:2021:21 web python manage.py shell</span><br></pre></td></tr></table></figure><p>如果启动一个带有容器连接的服务，<code>run</code>命令将首先检查连接到的服务是否已运行，如果是停止状态，将会启动它，直到所有的相关服务都处于正在运行状态，才会执行你创建的命令。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose run db psql -h db -U docker</span><br></pre></td></tr></table></figure><p>这将创建一个与PostgreSQL容器<code>db</code>交互服务。</p><p>如果你不希望启动相关联容器，可以使用<code>--no-deps</code>标记：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose run --no-deps web python manage.py shell</span><br></pre></td></tr></table></figure><h3 id="start"><a href="#start" class="headerlink" title="start"></a>start</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用法：start [SERVICE...]</span><br></pre></td></tr></table></figure><p>启动服务中已经存在的容器。</p><h3 id="up"><a href="#up" class="headerlink" title="up"></a>up</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">用法：up [options] [SERVICE...]</span><br><span class="line">选项：</span><br><span class="line">-d                     分离模式：在后台运行容器，只打印新的容器名称</span><br><span class="line">--no-color             单色输出</span><br><span class="line">--no-deps              不启动link连接的服务</span><br><span class="line">--force-recreate       强制重新创建容器，即使镜像没有任何改变。与--no-recreate会冲突</span><br><span class="line">--no-recreate          如果对应容器已经存在,不重新创建它。与--force-recreate会冲突</span><br><span class="line">--no-build             不构建镜像，即使缺失</span><br><span class="line">-t, --timeout TIMEOUT  为容器设置关闭超时时间，单位：秒 (默认为 10)</span><br></pre></td></tr></table></figure><p>对服务，构建镜像、(重新)创建容器、启动容器。</p><p>该命令还将启动任何相关的且没有被启动的服务。</p><p><code>docker-compose up</code>命令将显示所有容器的输出，命令结束时，所有容器都将关闭。运行<code>docker-compose up -d</code>将在后台启动运行容器。</p><p>如果服务中已经存在运行中的容器了，并且在容器创建后更改服务配置或者镜像，<code>docker-compose up</code>命令将会停止当前容器（保存挂载卷）并重新构建启动容器。当然，也可以通过<code>--no-recreate</code>选项来避免重新构建。</p><p>使用<code>--force-recreate</code>标记，可以强制停止并重构所有容器。</p><h3 id="logs"><a href="#logs" class="headerlink" title="logs"></a>logs</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">用法：logs [options] [SERVICE...]</span><br><span class="line">选项：</span><br><span class="line">--no-color  单色输出</span><br></pre></td></tr></table></figure><p>显示服务输出的日志内容。</p><h3 id="port"><a href="#port" class="headerlink" title="port"></a>port</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">用法：port [options] SERVICE PRIVATE_PORT</span><br><span class="line">选项：</span><br><span class="line">--protocol=proto  tcp 或 udp [默认为 tcp]</span><br><span class="line">--index=index     对应实例服务的第几个容器[默认为 1]</span><br></pre></td></tr></table></figure><p>打印服务中端口绑定对应的主机端口。</p><h3 id="pull"><a href="#pull" class="headerlink" title="pull"></a>pull</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">用法：pull [options] [SERVICE...]</span><br><span class="line">选项：</span><br><span class="line">--ignore-pull-failures 尽可能拉取服务，忽略拉取失败</span><br></pre></td></tr></table></figure><p>拉取服务镜像。</p><h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">用法：rm [options] [SERVICE...]</span><br><span class="line">选项:</span><br><span class="line">-f, --force   强制删除，不询问确认信息</span><br><span class="line">-v            移除容器挂载的卷</span><br></pre></td></tr></table></figure><p>删除停止的服务容器。</p><h3 id="scale"><a href="#scale" class="headerlink" title="scale"></a>scale</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用法：scale [SERVICE=NUM...]</span><br></pre></td></tr></table></figure><p>设置一个服务需要运行的容器数量。<br>参数形式为<code>service=num</code>。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose scale web=2 worker=3</span><br></pre></td></tr></table></figure><h3 id="stop"><a href="#stop" class="headerlink" title="stop"></a>stop</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">用法：stop [options] [SERVICE...]</span><br><span class="line">选项：</span><br><span class="line">-t, --timeout TIMEOUT      设置关闭容器的超时时间</span><br></pre></td></tr></table></figure><p>停止容器而不移除，可以通<code>docker-compose start</code>重新启动。</p><h2 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h2><p>上面的doc并非本人撰写，但是我忘记在哪里看到并且下载到本地了，如有版权问题，请联系我补充更正，谢谢。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;下面将介绍 &lt;code&gt;docker-compose&lt;/code&gt; 子命令的使用。也可以通过运行 &lt;code&gt;docker-compose --help&lt;/code&gt;来查看这些信息。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#build&quot;&gt;build&lt;/a&gt;&lt;/li&gt;

      
    
    </summary>
    
    
      <category term="docker" scheme="http://binzhizhu.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>糟糕 玩cypress上瘾了</title>
    <link href="http://binzhizhu.github.io/2019/03/01/%E7%B3%9F%E7%B3%95-%E7%8E%A9cypress%E4%B8%8A%E7%98%BE%E4%BA%86/"/>
    <id>http://binzhizhu.github.io/2019/03/01/糟糕-玩cypress上瘾了/</id>
    <published>2019-03-01T05:17:26.000Z</published>
    <updated>2019-06-16T15:49:25.444Z</updated>
    
    <content type="html"><![CDATA[<h3 id="玩-e2e-cypress-上瘾了，你们前端项目一般如何测试？"><a href="#玩-e2e-cypress-上瘾了，你们前端项目一般如何测试？" class="headerlink" title="玩 e2e cypress 上瘾了，你们前端项目一般如何测试？"></a>玩 e2e cypress 上瘾了，你们前端项目一般如何测试？</h3><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>换了 Mac pro 不知不觉更喜欢深夜敲代码了，真的香！！！不知不觉已经快凌晨 4 点了，我带着困意还是打算发个帖子和大家共享一下我这几天琢磨的一些事情。本人其实是后端，但由于公司的发展与需求，开始着手维护前端项目，也一直在看 react （大佬可以带带我嘻）为了确保业务 flow 能够 stabling，最近公司前端项目在测试环节上选用了 e2e 的 cypress，琢磨了一阵子，体验还是很好的，开箱即用。</p><h3 id="体验"><a href="#体验" class="headerlink" title="体验"></a>体验</h3><ul><li><p>开箱即用</p></li><li><p>官方 doc 很多，利于开发与维护</p></li><li><p>gui 界面（ env：google 浏览器），可边测边调整</p></li><li><p>自定义 commands</p></li><li><p>自定义 fixture，可 mock 数据</p></li><li><p>支持 ci 运行测试，可上传到 bashBoard</p></li><li><p>关注测试覆盖率（ Chrome 的 coverage ）</p></li><li><p>截图功能，用例失败的场景节点会被截图保存，利于复现</p></li><li><p>录屏功能，每个测试用例都会记录下来（ MP4 ）</p></li><li><p>等等。。。  </p></li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>饿了么首页为例：验证搜索一个商品，断言如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">it(&apos;输入搜索词，结果正确展示&apos;, () =&gt; &#123;</span><br><span class="line">  cy.visit(&apos;https://h5.ele.me/&apos;)</span><br><span class="line">  // 点击跳转搜索页面</span><br><span class="line">  cy.get(&apos;.search&apos;).click()</span><br><span class="line"></span><br><span class="line">  cy.wait(200)</span><br><span class="line">  cy.get(&apos;input&apos;).type(&apos;麻辣烫&apos;)</span><br><span class="line"></span><br><span class="line">  cy.get(&apos;button&apos;).click()</span><br><span class="line"></span><br><span class="line">  // 目标页面地址包含 search 点击列表第一项</span><br><span class="line">  cy.wait(500)</span><br><span class="line">  cy.url().should(&apos;include&apos;, &apos;search&apos;)</span><br><span class="line">  cy.get(&apos;.shop&apos;).first().click()</span><br><span class="line"></span><br><span class="line">  // 跳转至商家详情页，找到购物车元素</span><br><span class="line">  cy.wait(500)</span><br><span class="line">  cy.get(&apos;.cartview&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>[原文链接]  <a href="https://zhuanlan.zhihu.com/p/32666685" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/32666685</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;玩-e2e-cypress-上瘾了，你们前端项目一般如何测试？&quot;&gt;&lt;a href=&quot;#玩-e2e-cypress-上瘾了，你们前端项目一般如何测试？&quot; class=&quot;headerlink&quot; title=&quot;玩 e2e cypress 上瘾了，你们前端项目一般如何测试
      
    
    </summary>
    
    
      <category term="cypress" scheme="http://binzhizhu.github.io/tags/cypress/"/>
    
      <category term="测试" scheme="http://binzhizhu.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>2018年度总结</title>
    <link href="http://binzhizhu.github.io/2019/01/29/2018%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    <id>http://binzhizhu.github.io/2019/01/29/2018年度总结/</id>
    <published>2019-01-29T09:32:19.000Z</published>
    <updated>2019-01-29T10:11:51.783Z</updated>
    
    <content type="html"><![CDATA[<p> 2018年过得很快，岁月如梭，其实是每一年都过得很快。但是18年对于我来说比较特别，6月份刚大学毕业，毕业至今的这一段时间不长不短，这一段经历不痛不痒。18年我给自己的tag是：”快乐“，结果背道而驰，活生生吃了一个”真香”警告。我乐于分享，乐于总结，热爱写<a href="http://binzhizhu.top" target="_blank" rel="noopener">博客</a>，总结当下的自己才能不断的进步。!</p><p><img src="\blogimages\11-16.png" alt="binzhizhu"></p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>每当回顾这一年，我总跟朋友说：我感觉我已经工作好几年了。大四第一学期上完课就开始跟同学到处跑招聘会，而且是愣头青的那种，技术小白抱着进大厂的心态，结果我就不多说了，2017.12拿到第一份offer，那家公司是网站开发，说真的很糟糕，刚开始我死活不愿去，但是没有更好的，想着刚出来混还是得咬咬牙，仅仅是当做一个跳板，见机行事。于是，只身前往搬砖的附近租了一间房间，开始了搬砖的生活 0.0 ，年后一回来就离开那家公司了。拿到了一家电商创业公司的offer，当时的技术Team给我感觉很好，愿意留下来沉淀自己。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 2018年过得很快，岁月如梭，其实是每一年都过得很快。但是18年对于我来说比较特别，6月份刚大学毕业，毕业至今的这一段时间不长不短，这一段经历不痛不痒。18年我给自己的tag是：”快乐“，结果背道而驰，活生生吃了一个”真香”警告。我乐于分享，乐于总结，热爱写&lt;a href
      
    
    </summary>
    
    
      <category term="summary" scheme="http://binzhizhu.github.io/tags/summary/"/>
    
  </entry>
  
  <entry>
    <title>教你用认知和人性来做最棒的程序员</title>
    <link href="http://binzhizhu.github.io/2019/01/19/%E6%95%99%E4%BD%A0%E7%94%A8%E8%AE%A4%E7%9F%A5%E5%92%8C%E4%BA%BA%E6%80%A7%E6%9D%A5%E5%81%9A%E6%9C%80%E6%A3%92%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    <id>http://binzhizhu.github.io/2019/01/19/教你用认知和人性来做最棒的程序员/</id>
    <published>2019-01-19T05:30:22.000Z</published>
    <updated>2019-01-19T05:54:15.001Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h2><p>  今天早上在掘金社区看到一篇文章“教你用认知和人性来做最棒的程序员”，我觉得文章写的不错，也让我产生了一些共鸣，<br>  于是想跟大家一起分享一下，已经通过作者的许可，也会贴出文章的原地址。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>不久前，在团队内部和大家做了一次分享，内容就是这次要讲的“用认知和人性来提升自己的技术水平”，大家反响不错，所以这次整理一下也分享给大家。<br>最初我是想用“借优秀的产品经理思维来做最棒程序员”的这个标题，但想想还是要有同理心，技术同学平时和产品同学已经是相爱相杀了，就不刺激大家啦。但是必须要说的是优秀的产品经理思维和优秀的程序员思维确实是殊途同归的，两者是想通的，就是来自认知和人性。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>这里我不会过多去梳理认知和人性的概念，后面会用很多例子来说明，保证通俗易懂，只想先提2个概念：</p><ul><li>对人性的理解能帮助提升认知</li><li>狭义的技术是指java,php,android,spring,vue等的掌握和实践，它们只是帮助你提升认知的工具，却绝不等同于认知。</li></ul><p>下面我来逐一举例说明：</p><h2 id="例子1-技术选型"><a href="#例子1-技术选型" class="headerlink" title="例子1-技术选型"></a>例子1-技术选型</h2><ul><li>问题：今年开始慢慢火的一个移动端跨平台技术是google发布的”flutter”，如果你作为一名移动端的开发人员来评估这门技术是否值得选型作为公司产品的语言框架，你怎么能保证评估不会看走眼？</li><li>认知：flutter强化了跨平台的生产效率，且性能比前端框架更好。</li><li>解释：很多同学会想，怎么第一句感觉就像废话一样，人家官方文档也是这么写的，这叫什么认知。别急，所谓的认知，就是能够提炼成外人看上去貌似一句很普通的话，但只有经过深度思考的你才知道它真正的价值。在flutter没有出现前，我存在一个认知偏差，我认为客户端一定会被前端诸如react，vue这样的技术取代。<br>因为它们既可以跨平台，也可以随时更新，符合互联网快速变化的节奏。但我的认知存在一个非常严重的漏洞，那就是跨平台和随时更新在客户端技术里的占比各应该是多少？哪个更重要？经过分析思考，以我们公司当前用户量的发展阶段，提升跨平台的生产效率且不损失太多性能更重要，所谓的运营快速需求变化有时候可以通过事先想清楚，而降低频率。<br>flutter带来的生产效率提升，不仅仅是一个开发可以同时产出android和ios两端应用。更在于产品经理以后只需要和一个开发沟通需求细节，不会再担心出现android和ios功能细节实现偏差的问题了。由于有了这样的认知，虽然flutter作为新技术，还有需要完善的地方。但这不是主要问题，我们愿意为它去冒险，在我们的产品里去尽快实践。</li><li>人性：最后多说一句，为什么google先做了kotlin后又做了flutter呢？我的认知是：大公司两个部门做重复轮子很正常，互相竞争，看谁更好。一个想试探性取代java以避免被oracle捏住命脉（如果接受的人多，将来把底层的jvm再抽掉），一个野心更大希望统一所有平台，不同部门的想法而已。大家不要把google的布局想得那么纯粹技术化，大家都是人嘛。人脱离不了：竞争，征服，自保的人性。:)</li></ul><h2 id="例子2-查线上问题"><a href="#例子2-查线上问题" class="headerlink" title="例子2-查线上问题"></a>例子2-查线上问题</h2><ul><li>问题：觉得查线上问题很痛苦，压力很大，查得也不快怎么办？</li><li>认知：1 查线上问题是成本最小的，锻炼逻辑思维的方式，相比写代码更有效率。 2 查问题要看本质，抓住案发第一现场</li><li>解释：很多同学碰到线上问题的时候，都很痛苦，因为要加班了耽误我学习技术的时间，所以有时查问题态度也不积极。这个认知是非常错误的，大家平时都会认可优秀程序员的核心特质看的是思维逻辑，而不是用哪个语言哪个技术。那如果是思维逻辑优先，写代码就能比查线上问题更能提升吗？显然不是，大家知道我们在写代码时，往往要花费很多时间在编写冗余代码（如get,set代码，配置文件），<br>普通的crud逻辑，编译，部署等这些非核心点上，它们并不能帮助我们提升思维（动手写代码前的思考才是最核心的）。但是查线上问题就不一样了，你不需要写任何代码，但是需要在很短时间内，让自己理清思路，按正确的步骤去查出代码的核心问题，底层系统的核心问题。你需要对系统很了解，对业务逻辑很了解，对代码细节很了解，这真是一个几乎没有任何冗余步骤，但是却能快速提升严谨思维的好方式！<br>怎么让查问题更有效率？其实很简单，我们如果借鉴名侦探柯南的想法，那就是“抓住案发第一现场”。举两个例子，对于JAVA这样的静态语言，查询线上日志的方法是非常重要的。很多同学发现某个请求出问题了，就去看当次请求的日志，这种方式不一定准确。因为对于静态语言，它的案发第一现场可能已经不是当次请求了，很有可能是首次发生这个问题的时候，或者服务器刚刚启动的时候（静态语言的”缓存”特色）。<br>当你发现上层的业务系统发生了mysql死锁的报错，就不要太纠结于上层业务系统的日志了。应该去看mysql的bin log，抓住这个案发第一现场，看看到底发生了什么。不知道怎么解决线上问题，99%是因为连案发第一现场都没找到，等你找到了，基本也有解决方法了。</li><li>人性：每个人都喜欢做省力的事情，喜欢的事情。但是人往往有偏见，根本没有想明白查线上问题的价值，就认为这是一个很low的事，是不可取的。对自己不了解的，未知的事物，应该敬畏和学习。</li></ul><h2 id="例子3-技术面试"><a href="#例子3-技术面试" class="headerlink" title="例子3-技术面试"></a>例子3-技术面试</h2><ul><li>问题：很多同学的技术经验已经很扎实了，也能写出很稳定的代码，但是作为技术面试官，为什么老是会看走眼呢？</li><li>认知：对应聘者而言，能否独立解决问题是能通过面试的及格线，应聘者专业技术的掌握程度只决定offer薪资的高低。</li><li>解释：是不是觉得又来歪论拉？恩，继续解释一番。首先问你，你为什么要招人，我想信很多人都会这么说：当然是找你来帮我干活啊，我现在天天干到11点，累死了，急需人帮忙啊。恩，所以你很清楚，这个人是要能独立解决问题的，能帮你分担的，不是来了还要你天天在那里盯着的。但是我们看到很多同学的内心认知是混乱的，虽然他能看懂这句话，但是在面试的时候他会这么做：准备10个左右他擅长的技术细节问题，一个个问，应聘者只能答出5个，废柴，不送。答出7个，恩，可以进来。<br>答出10个，还说了1个我不知道的，好牛逼，绝不能让他看出来我比他弱，否则进来后还怎么带他。但是这个和你之前痛恨的应试教育又有什么区别呢？这种招聘方式有很大的风险招进来的人是研究手机屏幕从几楼摔下去不会碎，而不是研究让屏幕显示更清晰的人。<br>正确的方式应该是：让他讲一个之前投入度比较高的项目，描述下自己是怎么独立去解决问题的。对每一个点的描述，只要你觉得还不能体现他“独立解决问题”的能力，那就继续扒皮深问，直到他竭尽全力，被你”逼到墙角”。特别优秀的人被逼到墙角后，具备现场把墙砸掉的能力，这样的人是死也不能放过的，具体什么意思大家可以去体会思考。<br>之前我们曾经面试过一个性能测试工程师，从技术细节看对性能测试的工具和方法是比较了解的。在项目描述中我们问了他一个问题：你之前通过性能压测发现的服务端问题，有去了解过发生的原因吗？他给的答复是：因为我们是外企，制度比较明确，开发也是另外一个部门，所以我没有去了解。不好意思，这个回答基本体现了没有独立解决问题的能力乃至意识。碰到一堵很小的墙，他都没有办法独立解决，好奇和学习的欲望也很弱。他在技术细节上的积累只是因为看了几本书，用了几次工具，这些都只是为了应付面试和不懂的领导，根本没有深入实践，他未来的瓶颈一定非常大。<br>只要能够独立解决问题，就一定能通过面试，有些技术不了解，最多就是被砍点薪资而已。在这一点上，10年工作经验的同学还真未必比得上2-3年工作经验的同学，如果没有独立解决问题的能力，那只是多累积了一些所谓的专业经验，但还是无法解决问题。很多大公司喜欢校招优秀的毕业生，也是这个原因，虽然这些学生还没有实际工作过，但已经具备了很强的独立解决问题能力。我们曾经招过一名同济大学的测试实习生，有一次她独立组织了部门的团建活动，搞得井井有条，方方面面都考虑到了，这样的同学做好技术只是时间问题。:)</li><li>人性：应聘者的人性有哪些呢？懒：影响独立解决问题的意识。 要面子：比如刚刚举的例子，拿公司制度掩盖自己无法独立解决问题的现状。（并且他自己是意识不到的，因为他内心的认知是混乱的） 盲目自信又不自信：对自己做的熟的东西盲目自信，对没接触过的技术很不自信。</li></ul><h2 id="例子4-最严重的线上故障"><a href="#例子4-最严重的线上故障" class="headerlink" title="例子4-最严重的线上故障"></a>例子4-最严重的线上故障</h2><ul><li>问题：到底是什么原因，会导致严重的线上故障呢？是我们团队的技术水平不高，还是流程问题才造成了如此严重的故障呢？</li><li>认知：个体的过失很难造成严重的线上故障。真正的原因是：集体性的认知出错。</li><li>解释：在现代微服务的架构下，各服务之间的解耦性已经做得非常好了，总体来说出现全面严重问题的概率已经降得非常多了。就像一个国家一样，不怕局部的腐败，怕的是整个链条的腐败。举个例子，如果一个系统上线前，需要在数据库里配置一个关键的参数，如果不配置会导致很多请求处理错误。但是开发同学发生了错误的认知，潜意识里认为配置不是写代码=配置没有写代码技术含量高=配置没有写代码重要，最后把它忘了。测试同学认为测试配置不是测试新写的代码=优先测试新写的代码，再测试配置=测试代码比测试配置更重要，最后把它也忘了。<br>那这基本上是救不回来了，上线后一定会发生严重的问题，每个链条的检查机制都失灵了。坚决预防集体性的认知出错，就可以避免很多严重的问题。<br>集体性的认知出错往往是从一些小现象开始的，比如我们的团队曾经发生过一次正常的项目延期，原因是周五到了，没有完成测试，为了避免仓促上线出问题，所以延期一天发布。其实到这里都是非常正常的，但是当测试同学在钉钉群里发出这个原因的时候，有一些同学发出了大拇指的表情。注意，这个时候大家是没有犯错的，但是认知已经出现了偏差，变成了“以后就算测不完，只要说项目风险，就可以延期”。群里很多同学都看着，一旦这个集体性的认知偏差形成，未来项目的延期就会越来越多。所以需要立刻出来说一句：因为风险项目暂时不上可以，但是延期的原因要总结反思。<br>通过这样一句让大家心里不太舒服的话，尽快把集体性认知偏差扭转过来。<br>马云说过”小事要大做”，就是这个道理，不大做，等发生大事的时候就来不及了。</li><li>人性：盲目自信：对自己做的领域有天然的偏见，哪个重要，哪个不重要。随大流：别人也这么做了，应该不会错，还省力，我也这么做。懒：默守所谓的安全方案，其实在那个场景下已经不安全了，但是内心认知出现偏差，懒得去破局改进。</li></ul><h2 id="例子5-如何看待代码逻辑复用"><a href="#例子5-如何看待代码逻辑复用" class="headerlink" title="例子5-如何看待代码逻辑复用"></a>例子5-如何看待代码逻辑复用</h2><ul><li>问题：对于代码逻辑的复用，大家的看法往往不一样，有些同学认为只要是有公共性的代码都该不断抽出通用函数复用。有些则认为对重要的通用逻辑才该复用，过度复用反而增加成本。</li><li>认知：能力该复用，业务不该复用。分久必合，合久必分。</li><li>解释：这里提出了两个认知，我们来分别解释下。能力该复用，业务不该复用，这个很好理解。能力是指对这个系统有价值的功能，会长期存在且扩展下去的。而业务是一个泛指，既可以表示单一的产品需求，也可以表示某个局部的功能。比如你的应用里接入了一个支付宝支付，对支付这个事情我们判断下来是一个基础核心能力，且将来很有可能也要接入微信支付，所以应该抽出公共的函数。<br>再比如对于客户端的登录页面和注册页面，虽然渲染逻辑90%是一样的，但是不应该复用，因为它们是单一功能，不是能力，贸然复用反而带来了很大的风险。<br>分久必合，合久必分，这个的理解就很有意思了。大家都知道，这句话的出处来自三国演义，说的是一个国家分裂久了就会合并，合并久了也会分裂，其实对代码逻辑的复用也是如此。大家在合并抽出公共函数时，会发现有10%-20%的逻辑不是那么顺眼，总感觉暂时放在里面是可以的，但将来可能会拆出来。那么在写公共函数时，就要特别注意这部分逻辑。它虽然暂时在函数里，但是需要做到和上下文相对隔离，甚至还可以加入明显的换行和TO DO，为下一次的拆做好准备。<br>而在拆出一些独立逻辑的时候，也要思考这些逻辑可能和其它的哪些逻辑有机会是合起来的，那么尽量放在一个类里，一个包里，为后续的合做好准备。</li><li>人性：不要刻舟求剑，妄图用一套规则来应对外部复杂变化的世界，要因地制宜，实事求是，学会变通。</li></ul><h2 id="例子6-开源的意义"><a href="#例子6-开源的意义" class="headerlink" title="例子6-开源的意义"></a>例子6-开源的意义</h2><ul><li>问题：为什么现在很多中国的互联网公司开始重视开源的宣传了？</li><li>认知：开源直接决定了公司的成本收入，以及人才储备</li><li>解释：是不是要崩溃了，开源无偿写代码，然后免费给别人用，不是在消耗公司成本吗？别急，还记得马云说过的一句话吗，“免费的才是最贵的”。恩，这个道理同样适用于开源。今天中国很多的互联网公司已经非常明白了，甭管你的开源技术到底好不好用，宣传一定要大，一定要让大家参与进来。<br>带来的好处太多了，因为用了你的开源消息队列，之后就会用你的云计算平台。因为程序员都很懒，开发环境和线上保持一套嘛，你后面一定能赚大钱。因为开源项目非常知名，让你公司的技术形象立刻高大起来（先不管这个项目到底创造了多少有价值的产品），每年校招的优质学生资源尽收囊中，其他公司要抢人，只能花更多的钱。而每年中国优秀的毕业生就那么多，早就供需失衡，谁抢到了大部分，那之后在技术上一定能保持绝对优势。<br>最后万一公司财报不好看了，不好意思开始收授权费，就像google收android的费用一样。不作恶只是口号，开源带来了无比巨大的利益，不能赚钱，谁开源？！现在微软也懂了这个道理，成为了开源社区的标杆，但在早期的鲍尔默时代可是出现了认知偏差呢。</li><li>人性：开源者的人性：追求利益，喜欢声誉。 接受开源的人：渴望进步，赚便宜，崇拜权威。</li></ul><h2 id="关键点：如何提升认知"><a href="#关键点：如何提升认知" class="headerlink" title="关键点：如何提升认知"></a>关键点：如何提升认知</h2><h3 id="内心简单"><a href="#内心简单" class="headerlink" title="内心简单"></a>内心简单</h3><p>  内心越简单的人，将来能到达的境界就越高。大家千万不要误解了，我说的不是思想浅薄，而是内心简单纯粹要像少年一样。一个很好的例子，郭靖，用世俗的眼光来看他天资不高，开始学什么都慢。但是他有一个很大的优点，就是想法简单，无私心，持之以恒。报家仇，报国仇，保护好他爱的人，不会去想是不是别人骗了他，他多做一点是不是亏了。20岁就达到五绝水平，最后终于融合“降龙十八掌”、“九阴真经”和“左右互搏”三大盖世武功为一体，武林尊为“天下第一侠士”。<br>  内心越简单，就越不会花费额外的精力在一些无关紧要的事上面。随着时间的推移，你的认知水平就一定能提升得更快。不要去想今天你学的语言明天是否还流行，先利用当前语言训练好你的思维模式。不要去想我作为测试给开发指出太多问题后，开发会不会不爽，做为测试你的核心是保证产品质量。不要去想今天我帮组内的开发分担了额外的代码编写，我是不是亏了，这些付出一定会在将来某个时候兑现，因为你比他们有更多的代码实践。</p><h3 id="相信跨界的力量"><a href="#相信跨界的力量" class="headerlink" title="相信跨界的力量"></a>相信跨界的力量</h3><p>  ipod+手机诞生了iphone，手机+钱包诞生了支付宝，c,python+java诞生了go，人类的创新其实都是来自于跨界的结合。很多时候大家去看一个技术大神，会认为他一定是看了很多专业的书，看了很多牛逼开源项目的代码，写了很多项目才达到现在的这个水平。然后又看到别人的兴趣爱好：音乐，滑雪，画画，牛逼，大神就是大神，做好技术的同时还能“兼顾”这些兴趣。<br>  这个认知完全错了好吗，我告诉你，写代码看书固然很重要，但如果他没有这些兴趣，他在技术上可能根本达不到今天的程度。一个有画画功底的人，理解向量，理解数据的PCA分析就是快好吗。一个财务出身的人，写支付系统的代码就是不容易出错好吗。人类的大脑从来都是一个网状的，互相关联的知识图谱，根本不存在靠”单一事物”修炼成功的好吗。千万不要成为技术上的孔乙己，天天学各种API的写法，和学习茴香豆的茴字有几种写法没有任何区别。<br>  在方案想不出来的时候，在代码水平感觉到瓶颈的时候，在看不懂一些专业书籍的时候，一定要跳出来，和自己的兴趣结合，和自己经历结合，和自己的生活结合，这样才能突破瓶颈，提升到更上一层的认知。</p><h2 id="相信更高认知人的指引"><a href="#相信更高认知人的指引" class="headerlink" title="相信更高认知人的指引"></a>相信更高认知人的指引</h2><p> 科幻神作三体里，外星人看地球人就像纸片一样，在三体人的眼中，地球人是二维的，而不是三维的。回到现实中，高认知的人看低认知的人也是一样的，不是低认知的人不够努力，而是你的知识图谱里比高认知的人少了一些维度。所以不管你怎么努力，你会发现仍旧无法超过他，他还比你轻松，学霸给大家留下的阴影就是这么来的。<br> 在实际工作中，你的leader，你的架构师只要不是水货，往往他们的认知就是比你高的。一旦你觉得这个人的本性是靠谱的，你就该无条件去相信他给你的建议和指引。因为他能看到在你那个维度上感受不到的东西，照他的话去实践几次，你才有机会到达他那个维度，才能升级认知。不过在现实情况中，我们往往看到很多leader和架构给下面的同学苦口婆心说了很多，但是他们不理解，反而更叛逆。这份痛苦我懂，你是拼了命想拉他到你那个维度，但是他还年轻着呢。:)</p><h2 id="持之以恒地实践"><a href="#持之以恒地实践" class="headerlink" title="持之以恒地实践"></a>持之以恒地实践</h2><p>人就是一个如此奇妙，如此复杂的生物，不管你看多少书，看多少源码，写多少demo，你不真刀真枪地去实践，去写代码，这些知识无论如何都无法进入你大脑的知识图谱。它们永远只能是“狭义上的知识”，而不是“有价值的认知”。相信大家人生中都有过类似的经历了，越是辛苦的实践，越是坚持，你最后的收获一定越大。简单来说，认知不通过持之以恒的实践是不可能升级的。<br>还有一点我必须要强调，实践应该尽量和公司的项目去结合，而不是依靠于自己写demo。这里面有一个很大的误区，自己私下写demo经常是没有“明确，高压的”目标的（人性总是偏懒的），这种实践往往很难提升认知。而公司的项目往往不同，会提出”支持多少用户访问”，“为什么你每次开发都不能更快一点”（核心挑战的是你架构的扩展能力），“为什么这个功能这么卡”（性能优化），这些“明确的，高压的”目标能督促你去拼命提升自己的认知（只是写demo是很难给自己设下这些障碍的，是反人性的）。<br>当然从结果来看，又是公司的压榨剥削拉，让我们回忆一下前面说的，如果你觉得这个公司是靠谱的，那就让我们的“内心简单一点”，持之以恒地实践升级认知吧。:)<br>最后总结一下，现在已经不是一个单纯比拼知识量的时代，而是比拼认知高低的时代。作为程序员我们并不特殊，和市场，财务，产品，运营的这些同学一样，核心看的是认知，并不存在谁比谁困难，谁比谁辛苦的这种浅层比较。<br>而我们学习的那些语言，框架，工具，和我们大学时期学习的微积分，高等物理没有区别，都只是帮助我们不断训练提升认知的实践工具，而不是认知本身。让我们不要再局限于程序员狭义技术的范畴内，把提升自己的认知作为最重要的目标，我们要努力做到“既是程序员，也不是程序员”。</p><p>最后总结一下，现在已经不是一个单纯比拼知识量的时代，而是比拼认知高低的时代。作为程序员我们并不特殊，和市场，财务，产品，运营的这些同学一样，核心看的是认知，并不存在谁比谁困难，谁比谁辛苦的这种浅层比较。<br>而我们学习的那些语言，框架，工具，和我们大学时期学习的微积分，高等物理没有区别，都只是帮助我们不断训练提升认知的实践工具，而不是认知本身。让我们不要再局限于程序员狭义技术的范畴内，把提升自己的认知作为最重要的目标，我们要努力做到“既是程序员，也不是程序员”。</p><p>作者：刘轶<br>链接：<a href="https://juejin.im/post/5c3f23606fb9a049b50715f0" target="_blank" rel="noopener">https://juejin.im/post/5c3f23606fb9a049b50715f0</a><br>来源：掘金</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;分享&quot;&gt;&lt;a href=&quot;#分享&quot; class=&quot;headerlink&quot; title=&quot;分享&quot;&gt;&lt;/a&gt;分享&lt;/h2&gt;&lt;p&gt;  今天早上在掘金社区看到一篇文章“教你用认知和人性来做最棒的程序员”，我觉得文章写的不错，也让我产生了一些共鸣，&lt;br&gt;  于是想跟大家一
      
    
    </summary>
    
    
      <category term="blog" scheme="http://binzhizhu.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>基于yii-gii实现的一个批量生成模型测试的拓展工具</title>
    <link href="http://binzhizhu.github.io/2019/01/14/%E5%9F%BA%E4%BA%8Eyii-gii%E5%AE%9E%E7%8E%B0%E7%9A%84%E4%B8%80%E4%B8%AA%E6%89%B9%E9%87%8F%E7%94%9F%E6%88%90%E6%A8%A1%E5%9E%8B%E6%B5%8B%E8%AF%95%E7%9A%84%E6%8B%93%E5%B1%95%E5%B7%A5%E5%85%B7/"/>
    <id>http://binzhizhu.github.io/2019/01/14/基于yii-gii实现的一个批量生成模型测试的拓展工具/</id>
    <published>2019-01-14T10:34:22.000Z</published>
    <updated>2019-01-14T10:45:19.338Z</updated>
    
    <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>  项目离不开业务，业务离不开需求，所以就离不开CURD。项目上线的时候，我们需要批量进行数据库迁移，这个时候我们需要确保migrate是万无一失的，能够百分百保证每个model的curd能够准确的执行，通常我们可以自行编写model的功能测试，确保curd的成功率，但是如果项目涉及很多model的话就很难受了，不可能一个一个去写测试，所以基于yii-gii这个拓展，自定义了一个批量生成模型测试的拓展。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p> 这里不太想详细去介绍如何实现，深入了解yii-gii的原理基本都是没有问题的，自定义生成器，然后按照自己的预期写好生成器的model即可，这里贴下我的实现成果：</p><p> gayhub：<a href="https://github.com/BinZhiZhu/yii-curd-cest-gii" target="_blank" rel="noopener">https://github.com/BinZhiZhu/yii-curd-cest-gii</a></p><p><img src="/blogimages/2018-1-14-1.png" alt="1"><br><img src="/blogimages/2018-1-14-2.png" alt="2"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;场景&quot;&gt;&lt;/a&gt;场景&lt;/h2&gt;&lt;p&gt;  项目离不开业务，业务离不开需求，所以就离不开CURD。项目上线的时候，我们需要批量进行数据库迁移，这个时候我们需要确保migrate是万
      
    
    </summary>
    
    
      <category term="yii" scheme="http://binzhizhu.github.io/tags/yii/"/>
    
  </entry>
  
  <entry>
    <title>msyql多表查询sum()重复累加问题</title>
    <link href="http://binzhizhu.github.io/2019/01/08/msyql%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2sum-%E9%87%8D%E5%A4%8D%E7%B4%AF%E5%8A%A0%E9%97%AE%E9%A2%98/"/>
    <id>http://binzhizhu.github.io/2019/01/08/msyql多表查询sum-重复累加问题/</id>
    <published>2019-01-08T10:22:17.000Z</published>
    <updated>2019-01-08T11:11:18.503Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  今天产品那边反馈了一个bug：部分订单金额（筛选场景）统计的订单总额不对。我就觉得好奇了，咋会部分就不对呢？然后我就开始场景复现了，果真复现了，我们一起来看下这个问题。</p><h3 id="场景复现"><a href="#场景复现" class="headerlink" title="场景复现"></a>场景复现</h3><p>1.搜索订单（一个订单多个商品），这样容易复现，订单号：SH20190107120514818483。<br>2.该订单购买了两个商品，A商品100元，B商品0元，合计是100元。<br>3.此时订单数：1 ;订单金额：200</p><p><img src="/blogimages/2018-1-8-2.png" alt="1"></p><p><img src="/blogimages/2018-1-8-1.png" alt="2"></p><h3 id="定位问题"><a href="#定位问题" class="headerlink" title="定位问题"></a>定位问题</h3><p>表：订单表（A）：shop_order 订单商品表（B）：shop_order_goods </p><p>mysql 代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(DISTINCT(o.id)) as count, ifnull(sum(o.price),0) as sumprice  FROM ims_new_shop_order o  left join ims_new_shop_order_refund r on r.id =o.refundid  left join ims_new_shop_member m on m.openid=o.openid  and m.uniacid =  o.uniacid left join ims_new_shop_member_address a on o.addressid = a.id  left join ims_new_shop_saler s on s.openid = o.verifyopenid and s.uniacid=o.uniacid left join ims_new_shop_member sm on sm.openid = s.openid and sm.uniacid=s.uniacid left join ims_new_shop_order_goods sog on sog.uniacid = o.uniacid and sog.orderid = o.id  left join ims_new_shop_goods sg on sg.uniacid = o.uniacid and sg.id = sog.goodsid   WHERE  o.uniacid = 1 and o.deleted=0 and o.isparent=0 and o.istrade=0  AND locate(&apos;SH20190107120514818483&apos;,o.ordersn)&gt;0  AND o.create_from_wxapp = 0</span><br></pre></td></tr></table></figure></p><p>问题：我们会发现A表左连接B表的时候是不排除一对多的，也就是A表一条订单对应B表多条记录，但实际上这个时候我们需要去sum的金额仅仅是A表的订单金额，关联B表有多少记录我们是不需要在乎的。这个时候相当于重复统计了A表的订单金额，其实是受到了B表的影响。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>  我们应该应该怎么处理：</p><p>  实际上我们只需要在A表连接B表的时候，B表单独子查询处理，因为我们需要##去重B表的重复记录##，所有需要对B表group by进行分组，这样的话就不会出现sum累计的问题了。</p><p> ##A left join (SELECT id,uniacid,orderid,goodsid FROM ims_new_shop_order_goods GROUP BY goodsid) ## AS sog on C##</p> <a id="more"></a><p>更改后代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(DISTINCT(o.id)) as count, ifnull(sum(o.price),0) as sumprice  FROM ims_new_shop_order o  left join ims_new_shop_order_refund r on r.id =o.refundid  left join ims_new_shop_member m on m.openid=o.openid  and m.uniacid =  o.uniacid left join ims_new_shop_member_address a on o.addressid = a.id  left join ims_new_shop_saler s on s.openid = o.verifyopenid and s.uniacid=o.uniacid left join ims_new_shop_member sm on sm.openid = s.openid and sm.uniacid=s.uniacid left join (SELECT id,uniacid,orderid,goodsid FROM ims_new_shop_order_goods GROUP BY goodsid) AS sog on sog.uniacid = o.uniacid and sog.orderid = o.id  left join ims_new_shop_goods sg on sg.uniacid = o.uniacid and sg.id = sog.goodsid   WHERE  o.uniacid = 1 and o.deleted=0 and o.isparent=0 and o.istrade=0  AND locate(&apos;SH20190107120514818483&apos;,o.ordersn)&gt;0  AND o.create_from_wxapp = 0</span><br></pre></td></tr></table></figure></p><p><img src="/blogimages/2018-1-8-3.png" alt="3"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;  今天产品那边反馈了一个bug：部分订单金额（筛选场景）统计的订单总额不对。我就觉得好奇了，咋会部分就不对呢？然后我就开始场景复现了，果真复现了，我们一起来看下这个问题。&lt;/p&gt;
&lt;h3 id=&quot;场景复现&quot;&gt;&lt;a href=&quot;#场景复现&quot; class=&quot;headerlink&quot; title=&quot;场景复现&quot;&gt;&lt;/a&gt;场景复现&lt;/h3&gt;&lt;p&gt;1.搜索订单（一个订单多个商品），这样容易复现，订单号：SH20190107120514818483。&lt;br&gt;2.该订单购买了两个商品，A商品100元，B商品0元，合计是100元。&lt;br&gt;3.此时订单数：1 ;订单金额：200&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blogimages/2018-1-8-2.png&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blogimages/2018-1-8-1.png&quot; alt=&quot;2&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;定位问题&quot;&gt;&lt;a href=&quot;#定位问题&quot; class=&quot;headerlink&quot; title=&quot;定位问题&quot;&gt;&lt;/a&gt;定位问题&lt;/h3&gt;&lt;p&gt;表：订单表（A）：shop_order 订单商品表（B）：shop_order_goods &lt;/p&gt;
&lt;p&gt;mysql 代码：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;SELECT COUNT(DISTINCT(o.id)) as count, ifnull(sum(o.price),0) as sumprice  FROM ims_new_shop_order o  left join ims_new_shop_order_refund r on r.id =o.refundid  left join ims_new_shop_member m on m.openid=o.openid  and m.uniacid =  o.uniacid left join ims_new_shop_member_address a on o.addressid = a.id  left join ims_new_shop_saler s on s.openid = o.verifyopenid and s.uniacid=o.uniacid left join ims_new_shop_member sm on sm.openid = s.openid and sm.uniacid=s.uniacid left join ims_new_shop_order_goods sog on sog.uniacid = o.uniacid and sog.orderid = o.id  left join ims_new_shop_goods sg on sg.uniacid = o.uniacid and sg.id = sog.goodsid   WHERE  o.uniacid = 1 and o.deleted=0 and o.isparent=0 and o.istrade=0  AND locate(&amp;apos;SH20190107120514818483&amp;apos;,o.ordersn)&amp;gt;0  AND o.create_from_wxapp = 0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;问题：我们会发现A表左连接B表的时候是不排除一对多的，也就是A表一条订单对应B表多条记录，但实际上这个时候我们需要去sum的金额仅仅是A表的订单金额，关联B表有多少记录我们是不需要在乎的。这个时候相当于重复统计了A表的订单金额，其实是受到了B表的影响。&lt;/p&gt;
&lt;h3 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;#解决方案&quot; class=&quot;headerlink&quot; title=&quot;解决方案&quot;&gt;&lt;/a&gt;解决方案&lt;/h3&gt;&lt;p&gt;  我们应该应该怎么处理：&lt;/p&gt;
&lt;p&gt;  实际上我们只需要在A表连接B表的时候，B表单独子查询处理，因为我们需要##去重B表的重复记录##，所有需要对B表group by进行分组，这样的话就不会出现sum累计的问题了。&lt;/p&gt;
&lt;p&gt; ##A left join (SELECT id,uniacid,orderid,goodsid FROM ims_new_shop_order_goods GROUP BY goodsid) ## AS sog on C##&lt;/p&gt;
    
    </summary>
    
    
      <category term="mysql" scheme="http://binzhizhu.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>高仿快递智能识别地址功能</title>
    <link href="http://binzhizhu.github.io/2018/12/14/%E9%AB%98%E4%BB%BF%E5%BF%AB%E9%80%92%E6%99%BA%E8%83%BD%E8%AF%86%E5%88%AB%E5%9C%B0%E5%9D%80%E5%8A%9F%E8%83%BD/"/>
    <id>http://binzhizhu.github.io/2018/12/14/高仿快递智能识别地址功能/</id>
    <published>2018-12-14T09:54:56.000Z</published>
    <updated>2018-12-15T13:13:59.914Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  这周接到一个项目功能，大致就类似快递类寄件智能识别收货地址，只需要复制粘贴地址信息，点击完成就直接填写到了对应的地址信息的输入框。<br>  我简单的举个例子吧：<br>  <em>小埋13000000000广东省广州市天河区体育西路xxx号</em><br>  上面就会自动识别为：</p><ul><li>收货人：小埋</li><li>电话：13000000000</li><li>省市区：广东省 广州市 天河区</li><li>地址：体育西路xxx号<br>这样就认为是智能识别了，不需要一个一个去手动填写，只需要复制粘贴物流地址信息即可。说是这样说，但实际上内心是一万只曹尼玛 ^ ^</li></ul><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>  我开始是再Google搜索有没有相关的第三方SDK，一般都会这样去思考，只需要调第三方sdk接口即可，但是实际上会有一个问题：地址库！！！<br>  现公司内部使用的地址库是腾讯开发的Jquery Weui组件库中的cityPicker，也就是填写省市区的地址选择器，所以地址库不统一的话是一个硬伤。</p><p>  gayHub 地址<br>  [smart-parse]: <a href="https://github.com/BinZhiZhu/smart-parse" target="_blank" rel="noopener">https://github.com/BinZhiZhu/smart-parse</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;  这周接到一个项目功能，大致就类似快递类寄件智能识别收货地址，只需要复制粘贴地址信息，点击完成就直接填写到了对应的地址信息的输入框。&lt;br
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>mysql-Expression #1 of SELECT list is not in GROUP BY clause解决方案</title>
    <link href="http://binzhizhu.github.io/2018/11/30/mysql-Expression-1-of-SELECT-list-is-not-in-GROUP-BY-clause%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://binzhizhu.github.io/2018/11/30/mysql-Expression-1-of-SELECT-list-is-not-in-GROUP-BY-clause解决方案/</id>
    <published>2018-11-29T16:45:20.000Z</published>
    <updated>2018-11-29T16:58:24.307Z</updated>
    
    <content type="html"><![CDATA[<p>##前言<br>  最近部署自己项目到服务器后，运行时mysql报错，抛出异常的代码为：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column &apos;support_desk.mod_users_groups.group_id&apos; which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by</span><br></pre></td></tr></table></figure></p><p>  谷歌翻译一下大概意思：</p><p>  <strong>SELECT列表的表达式＃1不在GROUP BY子句中，并且包含非聚合列’support_desk.mod_users_groups.group_id’，它在功能上不依赖于GROUP BY子句中的列; 这与sql_mode = only_full_group_by不兼容</strong></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>  实锤是因为MySQL版本的原因，我去StackOverflow查了相关的解决方案，最终还是解决了这个问题。</p><ul><li>cd /etc/my.cnf 或者etc/mysql/my.cnf 不清楚路径可以 whereis my.cnf 打印pwd路径</li><li>vim my.cnf</li><li><p>添加sql_mode</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">    sql_mode = STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span><br></pre></td></tr></table></figure></li><li><p>esc :wq 报错退出</p></li><li><p>重启一下mysql服务 sudo service mysql restart / 或者/etc/init.d/mysql restart等等都可以</p></li><li><p>除了上面这种方法也可以直接连接mysql 通过mysql-&gt;set …[sql_mode] 类似</p><p>这样问题就解决了，最后贴一下解决方案的地址</p><p>[stackoverflow]：<a href="https://stackoverflow.com/questions/34115174/error-related-to-only-full-group-by-when-executing-a-query-in-mysql" target="_blank" rel="noopener">https://stackoverflow.com/questions/34115174/error-related-to-only-full-group-by-when-executing-a-query-in-mysql</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##前言&lt;br&gt;  最近部署自己项目到服务器后，运行时mysql报错，抛出异常的代码为：&lt;br&gt;  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1
      
    
    </summary>
    
      <category term="后端" scheme="http://binzhizhu.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="mysql" scheme="http://binzhizhu.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>探讨Tencent/weui.js之picker组件库</title>
    <link href="http://binzhizhu.github.io/2018/11/30/%E6%8E%A2%E8%AE%A8Tencent-weui-js%E4%B9%8Bpicker%E7%BB%84%E4%BB%B6%E5%BA%93/"/>
    <id>http://binzhizhu.github.io/2018/11/30/探讨Tencent-weui-js之picker组件库/</id>
    <published>2018-11-29T16:16:09.000Z</published>
    <updated>2018-11-29T16:35:10.639Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><dl><br><dt><a href="#picker">picker(items, options)</a></dt><br><dd><p>picker 多列选择器。</p><br></dd><br><dt><a href="#datePicker">datePicker(options)</a></dt><br><dd><p>datePicker 时间选择器，由picker拓展而来，提供年、月、日的选择。</p><br></dd><br></dl><p><a name="picker"></a></p><h2 id="picker-items-options"><a href="#picker-items-options" class="headerlink" title="picker(items, options)"></a>picker(items, options)</h2><p>picker 多列选择器。</p><p><strong>Kind</strong>: global function  </p><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>items</td><td><code>array</code></td><td></td><td>picker的数据，即用于生成picker的数据，picker的层级可以自己定义，但建议最多三层。数据格式参考example。</td></tr><tr><td>options</td><td><code>Object</code></td><td></td><td>配置项</td></tr><tr><td>[options.depth]</td><td><code>number</code></td><td></td><td>picker深度(也就是picker有多少列) 取值为1-3。如果为空，则取items第一项的深度。</td></tr><tr><td>[options.id]</td><td><code>string</code></td><td><code>&quot;default&quot;</code></td><td>作为picker的唯一标识，作用是以id缓存当时的选择。（当你想每次传入的defaultValue都是不一样时，可以使用不同的id区分）</td></tr><tr><td>[options.className]</td><td><code>string</code></td><td></td><td>自定义类名</td></tr><tr><td>[options.container]</td><td><code>string</code></td><td></td><td>指定容器</td></tr><tr><td>[options.defaultValue]</td><td><code>array</code></td><td></td><td>默认选项的value数组</td></tr><tr><td>[options.onChange]</td><td><code>function</code></td><td></td><td>在picker选中的值发生变化的时候回调</td></tr><tr><td>[options.onConfirm]</td><td><code>function</code></td><td></td><td>在点击”确定”之后的回调。回调返回选中的结果(Array)，数组长度依赖于picker的层级。</td></tr><tr><td>[options.onClose]</td><td><code>function</code></td><td></td><td>picker关闭后的回调</td></tr></tbody></table><a id="more"></a><p><strong>Example</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单列picker</span></span><br><span class="line">weui.picker([</span><br><span class="line">&#123;</span><br><span class="line">    label: <span class="string">'飞机票'</span>,</span><br><span class="line">    value: <span class="number">0</span>,</span><br><span class="line">    disabled: <span class="literal">true</span> <span class="comment">// 不可用</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    label: <span class="string">'火车票'</span>,</span><br><span class="line">    value: <span class="number">1</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    label: <span class="string">'汽车票'</span>,</span><br><span class="line">    value: <span class="number">3</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    label: <span class="string">'公车票'</span>,</span><br><span class="line">    value: <span class="number">4</span>,</span><br><span class="line">&#125;</span><br><span class="line">], &#123;</span><br><span class="line">   className: <span class="string">'custom-classname'</span>,</span><br><span class="line">   container: <span class="string">'body'</span>,</span><br><span class="line">   defaultValue: [<span class="number">3</span>],</span><br><span class="line">   onChange: <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(result)</span><br><span class="line">   &#125;,</span><br><span class="line">   onConfirm: <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(result)</span><br><span class="line">   &#125;,</span><br><span class="line">   id: <span class="string">'singleLinePicker'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><strong>Example</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多列picker</span></span><br><span class="line">weui.picker([</span><br><span class="line">    &#123;</span><br><span class="line">        label: <span class="string">'1'</span>,</span><br><span class="line">        value: <span class="string">'1'</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        label: <span class="string">'2'</span>,</span><br><span class="line">        value: <span class="string">'2'</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        label: <span class="string">'3'</span>,</span><br><span class="line">        value: <span class="string">'3'</span></span><br><span class="line">    &#125;</span><br><span class="line">], [</span><br><span class="line">    &#123;</span><br><span class="line">        label: <span class="string">'A'</span>,</span><br><span class="line">        value: <span class="string">'A'</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        label: <span class="string">'B'</span>,</span><br><span class="line">        value: <span class="string">'B'</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        label: <span class="string">'C'</span>,</span><br><span class="line">        value: <span class="string">'C'</span></span><br><span class="line">    &#125;</span><br><span class="line">], &#123;</span><br><span class="line">    defaultValue: [<span class="string">'3'</span>, <span class="string">'A'</span>],</span><br><span class="line">    onChange: <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(result);</span><br><span class="line">    &#125;,</span><br><span class="line">    onConfirm: <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(result);</span><br><span class="line">    &#125;,</span><br><span class="line">    id: <span class="string">'multiPickerBtn'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><strong>Example</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 级联picker</span></span><br><span class="line">weui.picker([</span><br><span class="line">&#123;</span><br><span class="line">    label: <span class="string">'飞机票'</span>,</span><br><span class="line">    value: <span class="number">0</span>,</span><br><span class="line">    children: [</span><br><span class="line">        &#123;</span><br><span class="line">            label: <span class="string">'经济舱'</span>,</span><br><span class="line">            value: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            label: <span class="string">'商务舱'</span>,</span><br><span class="line">            value: <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    label: <span class="string">'火车票'</span>,</span><br><span class="line">    value: <span class="number">1</span>,</span><br><span class="line">    children: [</span><br><span class="line">        &#123;</span><br><span class="line">            label: <span class="string">'卧铺'</span>,</span><br><span class="line">            value: <span class="number">1</span>,</span><br><span class="line">            disabled: <span class="literal">true</span> <span class="comment">// 不可用</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            label: <span class="string">'坐票'</span>,</span><br><span class="line">            value: <span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            label: <span class="string">'站票'</span>,</span><br><span class="line">            value: <span class="number">3</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    label: <span class="string">'汽车票'</span>,</span><br><span class="line">    value: <span class="number">3</span>,</span><br><span class="line">    children: [</span><br><span class="line">        &#123;</span><br><span class="line">            label: <span class="string">'快班'</span>,</span><br><span class="line">            value: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            label: <span class="string">'普通'</span>,</span><br><span class="line">            value: <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">], &#123;</span><br><span class="line">   className: <span class="string">'custom-classname'</span>,</span><br><span class="line">   container: <span class="string">'body'</span>,</span><br><span class="line">   defaultValue: [<span class="number">1</span>, <span class="number">3</span>],</span><br><span class="line">   onChange: <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(result)</span><br><span class="line">   &#125;,</span><br><span class="line">   onConfirm: <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(result)</span><br><span class="line">   &#125;,</span><br><span class="line">   id: <span class="string">'doubleLinePicker'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><a name="datePicker"></a></p><h2 id="datePicker-options"><a href="#datePicker-options" class="headerlink" title="datePicker(options)"></a>datePicker(options)</h2><p>datePicker 时间选择器，由picker拓展而来，提供年、月、日的选择。</p><p><strong>Kind</strong>: global function  </p><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>options</td><td></td><td></td><td>配置项</td></tr><tr><td>[options.id]</td><td><code>string</code></td><td><code>&quot;datePicker&quot;</code></td><td>作为picker的唯一标识</td></tr><tr><td>[options.start]</td><td><code>number</code> &#124; <code>string</code> &#124; <code>Date</code></td><td><code>2000</code></td><td>起始年份，如果是 <code>Number</code> 类型，表示起始年份；如果是 <code>String</code> 类型，格式为 ‘YYYY-MM-DD’；如果是 <code>Date</code> 类型，就传一个 Date</td></tr><tr><td>[options.end]</td><td><code>number</code> &#124; <code>string</code> &#124; <code>Date</code></td><td><code>2030</code></td><td>结束年份，同上</td></tr><tr><td>[options.cron]</td><td><code>string</code></td><td><code>&quot;<em> </em> *&quot;</code></td><td>cron 表达式，三位，分别是 dayOfMonth[1-31]，month[1-12] 和 dayOfWeek[0-6]（周日-周六）</td></tr><tr><td>[options.className]</td><td><code>string</code></td><td></td><td>自定义类名</td></tr><tr><td>[options.defaultValue]</td><td><code>array</code></td><td></td><td>默认选项的value数组, 如 [1991, 6, 9]</td></tr><tr><td>[options.onChange]</td><td><code>function</code></td><td></td><td>在picker选中的值发生变化的时候回调</td></tr><tr><td>[options.onConfirm]</td><td><code>function</code></td><td></td><td>在点击”确定”之后的回调。回调返回选中的结果(Array)，数组长度依赖于picker的层级。</td></tr></tbody></table><p><strong>Example</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例1：</span></span><br><span class="line">weui.datePicker(&#123;</span><br><span class="line">    start: <span class="number">1990</span>,</span><br><span class="line">    end: <span class="number">2000</span>,</span><br><span class="line">    defaultValue: [<span class="number">1991</span>, <span class="number">6</span>, <span class="number">9</span>],</span><br><span class="line">    onChange: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(result);</span><br><span class="line">    &#125;,</span><br><span class="line">    onConfirm: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(result);</span><br><span class="line">    &#125;,</span><br><span class="line">    id: <span class="string">'datePicker'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例2：</span></span><br><span class="line">weui.datePicker(&#123;</span><br><span class="line">     start: <span class="keyword">new</span> <span class="built_in">Date</span>(), <span class="comment">// 从今天开始</span></span><br><span class="line">     end: <span class="number">2030</span>,</span><br><span class="line">     defaultValue: [<span class="number">2020</span>, <span class="number">6</span>, <span class="number">9</span>],</span><br><span class="line">     onChange: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(result);</span><br><span class="line">     &#125;,</span><br><span class="line">     onConfirm: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(result);</span><br><span class="line">     &#125;,</span><br><span class="line">     id: <span class="string">'datePicker'</span></span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 示例3：</span></span><br><span class="line">weui.datePicker(&#123;</span><br><span class="line">     start: <span class="keyword">new</span> <span class="built_in">Date</span>(), <span class="comment">// 从今天开始</span></span><br><span class="line">     end: <span class="number">2030</span>,</span><br><span class="line">     cron: <span class="string">'* * 0,6'</span>,  <span class="comment">// 每逢周日、周六</span></span><br><span class="line">     onChange: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(result);</span><br><span class="line">     &#125;,</span><br><span class="line">     onConfirm: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(result);</span><br><span class="line">     &#125;,</span><br><span class="line">     id: <span class="string">'datePicker'</span></span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 示例4：</span></span><br><span class="line">weui.datePicker(&#123;</span><br><span class="line">     start: <span class="keyword">new</span> <span class="built_in">Date</span>(), <span class="comment">// 从今天开始</span></span><br><span class="line">     end: <span class="number">2030</span>,</span><br><span class="line">     cron: <span class="string">'1-10 * *'</span>,  <span class="comment">// 每月1日-10日</span></span><br><span class="line">     onChange: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(result);</span><br><span class="line">     &#125;,</span><br><span class="line">     onConfirm: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(result);</span><br><span class="line">     &#125;,</span><br><span class="line">     id: <span class="string">'datePicker'</span></span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Functions&quot;&gt;&lt;a href=&quot;#Functions&quot; class=&quot;headerlink&quot; title=&quot;Functions&quot;&gt;&lt;/a&gt;Functions&lt;/h2&gt;&lt;dl&gt;&lt;br&gt;&lt;dt&gt;&lt;a href=&quot;#picker&quot;&gt;picker(items, options)&lt;/a&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;picker 多列选择器。&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;dt&gt;&lt;a href=&quot;#datePicker&quot;&gt;datePicker(options)&lt;/a&gt;&lt;/dt&gt;&lt;br&gt;&lt;dd&gt;&lt;p&gt;datePicker 时间选择器，由picker拓展而来，提供年、月、日的选择。&lt;/p&gt;&lt;br&gt;&lt;/dd&gt;&lt;br&gt;&lt;/dl&gt;

&lt;p&gt;&lt;a name=&quot;picker&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;picker-items-options&quot;&gt;&lt;a href=&quot;#picker-items-options&quot; class=&quot;headerlink&quot; title=&quot;picker(items, options)&quot;&gt;&lt;/a&gt;picker(items, options)&lt;/h2&gt;&lt;p&gt;picker 多列选择器。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Kind&lt;/strong&gt;: global function  &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Param&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;items&lt;/td&gt;
&lt;td&gt;&lt;code&gt;array&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;picker的数据，即用于生成picker的数据，picker的层级可以自己定义，但建议最多三层。数据格式参考example。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;options&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;配置项&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[options.depth]&lt;/td&gt;
&lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;picker深度(也就是picker有多少列) 取值为1-3。如果为空，则取items第一项的深度。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[options.id]&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;quot;default&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;作为picker的唯一标识，作用是以id缓存当时的选择。（当你想每次传入的defaultValue都是不一样时，可以使用不同的id区分）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[options.className]&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;自定义类名&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[options.container]&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;指定容器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[options.defaultValue]&lt;/td&gt;
&lt;td&gt;&lt;code&gt;array&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;默认选项的value数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[options.onChange]&lt;/td&gt;
&lt;td&gt;&lt;code&gt;function&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;在picker选中的值发生变化的时候回调&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[options.onConfirm]&lt;/td&gt;
&lt;td&gt;&lt;code&gt;function&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;在点击”确定”之后的回调。回调返回选中的结果(Array)，数组长度依赖于picker的层级。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[options.onClose]&lt;/td&gt;
&lt;td&gt;&lt;code&gt;function&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;picker关闭后的回调&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="前端" scheme="http://binzhizhu.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="weui" scheme="http://binzhizhu.github.io/tags/weui/"/>
    
  </entry>
  
  <entry>
    <title>探讨Tencent/weui.js</title>
    <link href="http://binzhizhu.github.io/2018/11/30/%E6%8E%A2%E8%AE%A8Tencent-weui-js/"/>
    <id>http://binzhizhu.github.io/2018/11/30/探讨Tencent-weui-js/</id>
    <published>2018-11-29T16:10:09.000Z</published>
    <updated>2018-11-29T16:37:05.095Z</updated>
    
    <content type="html"><![CDATA[<p>##认识WeUI</p><p>  WeUI 的轻量级 js 封装。<br>  <em>注意：由于微信小程序不支持dom操作，所以weui.js并不适用于小程序。不过WeUI也为小程序开发了另外的版本，详情请看：<a href="https://github.com/Tencent/weui-wxss/" target="_blank" rel="noopener">https://github.com/Tencent/weui-wxss/</a></em><br>  手机预览：<a href="https://weui.io/weui.js/" target="_blank" rel="noopener">https://weui.io/weui.js/</a></p><p>##安装</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/Tencent/weui.js.git</span><br><span class="line">cd weui.js</span><br><span class="line">npm install</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><p>##编译</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>##使用</p><h3 id="global"><a href="#global" class="headerlink" title="global"></a>global</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://res.wx.qq.com/open/libs/weui/1.1.3/weui.min.css&quot;&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;https://res.wx.qq.com/open/libs/weuijs/1.1.4/weui.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    weui.alert(&apos;alert&apos;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="import-as-module"><a href="#import-as-module" class="headerlink" title="import as module"></a>import as module</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import &apos;weui&apos;;</span><br><span class="line">import weui from &apos;weui.js&apos;;</span><br><span class="line"></span><br><span class="line">weui.alert(&apos;alert&apos;);</span><br></pre></td></tr></table></figure><p>##文档</p><p>[文档]：<a href="https://github.com/Tencent/weui.js/blob/master/docs/README.md" target="_blank" rel="noopener">https://github.com/Tencent/weui.js/blob/master/docs/README.md</a></p><p>##Github</p><p>[github]：<a href="https://github.com/Tencent/weui.js" target="_blank" rel="noopener">https://github.com/Tencent/weui.js</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##认识WeUI&lt;/p&gt;
&lt;p&gt;  WeUI 的轻量级 js 封装。&lt;br&gt;  &lt;em&gt;注意：由于微信小程序不支持dom操作，所以weui.js并不适用于小程序。不过WeUI也为小程序开发了另外的版本，详情请看：&lt;a href=&quot;https://github.com/Ten
      
    
    </summary>
    
      <category term="前端" scheme="http://binzhizhu.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="weui" scheme="http://binzhizhu.github.io/tags/weui/"/>
    
  </entry>
  
</feed>
