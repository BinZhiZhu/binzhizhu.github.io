<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BinZhiZhu&#39;s Blog</title>
  
  <subtitle>Hello,World.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://binzhizhu.github.io/"/>
  <updated>2020-02-22T15:46:59.061Z</updated>
  <id>http://binzhizhu.github.io/</id>
  
  <author>
    <name>BinZhi Zhu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深入理解MySQL-学习笔记</title>
    <link href="http://binzhizhu.github.io/2020/02/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3MySQL-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://binzhizhu.github.io/2020/02/22/深入理解MySQL-学习笔记/</id>
    <published>2020-02-22T14:56:35.000Z</published>
    <updated>2020-02-22T15:46:59.061Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一条sql查询语句是如果执行的？"><a href="#一条sql查询语句是如果执行的？" class="headerlink" title="一条sql查询语句是如果执行的？"></a>一条sql查询语句是如果执行的？</h2><p>总体来说，MySQL大致分为server层和存储引擎层两大部分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">explain SELECT * FROM ims_member_entity</span><br><span class="line"></span><br><span class="line">### 执行过程</span><br><span class="line">starting0.000166010.573</span><br><span class="line">Executing hook on transaction 0.00001400.892</span><br><span class="line">starting0.00001500.955</span><br><span class="line">checking permissions0.00001400.892</span><br><span class="line">Opening tables0.000259016.497</span><br><span class="line">init0.00001601.019</span><br><span class="line">System lock0.00002201.401</span><br><span class="line">optimizing0.00001400.892</span><br><span class="line">statistics0.00002001.274</span><br><span class="line">preparing0.00002001.274</span><br><span class="line">Creating tmp table0.00005403.439</span><br><span class="line">executing0.000486030.955</span><br><span class="line">Sending data0.00011907.580</span><br><span class="line">end0.00001400.892</span><br><span class="line">query end0.00001500.955</span><br><span class="line">removing tmp table0.00001601.019</span><br><span class="line">query end0.00001300.828</span><br><span class="line">removing tmp table0.00001500.955</span><br><span class="line">query end0.00001200.764</span><br><span class="line">closing tables0.00001300.828</span><br><span class="line">freeing items0.000176011.210</span><br><span class="line">cleaning up0.00007704.904</span><br></pre></td></tr></table></figure><h3 id="Server层"><a href="#Server层" class="headerlink" title="Server层"></a>Server层</h3><p>包括连接器、查询缓存、分析器、优化器、执行器等，所有跨存储引擎的功能都在这一层实现，例如:存储过程、触发器、视图等。</p><h3 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h3><p>1.客户端与服务端建立连接，完成tcp三次握手之后，就执行ACL鉴权；<br>2.连接成功后，可通过：<code>show processlist;</code>来查看连接状态；<br>3.尽量使用长连接；<br>4.连接断开才会释放资源；<br>5.如果不断的建立连接，会占用太多的内存，导致OOM（内存溢出），会被系统强制kill掉，这种情况就是MySQL异常重启了；<br>6.上诉5的解决方案：1.定期断开连接，按需重连；2.MySQL5.7+版本，可通过：<code>mysql_reset_connection</code>来重新初始化连接资源，这个过程不需要重新ACL鉴权，而是会直接回到最初的连接状态。</p><h3 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h3><p>1.k-v对的形式缓存，即是：查询语句+查询结果；<br>2.基本就是getOrSet的过程，找得到直接返回，找不到则执行查询，将执行结果缓存起来；<br>3.不能滥用SQL_CACHE，每次更新会清空建立的缓存，静态表推荐使用，频繁更新的不推荐使用，后者命中缓存的几率很低，基本都是走执行过程了。</p><h3 id="分析器"><a href="#分析器" class="headerlink" title="分析器"></a>分析器</h3><p>举例子简单的sql语句：<br><code>select * from T where id = 1;</code><br>1.词法分析。MySQL会从输入的语句中的’select’这个关键字做识别，认为这是一条查询语句，继续会被T解析成表名T，id则会被识别为列ID；<br>2.语法分析。通过一系列的语法去检验sql语句是否满足MySQL的语法要求，如果语法错误则会出现<code>SQL syntax error</code>错误；</p><h3 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h3><p><code>select * from t1 join t2 using(ID) where t1.c=10 and t2.d=20;</code><br>1.决定使用哪个索引；<br>2.决定连接顺序，确认用哪种执行方案。例如：先查t1后t2,先t2后t1，这里方案是一致的，但是效率可能不同。<br>3.进入执行阶段；</p><h3 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h3><p>分析器已经告诉你了需要查询还是更新，优化器也决定了使用哪种方案，然后就准备执行语句了。<br>1.判断是否有执行查询语句权限；<br>2.在工程上，如果命中了缓存，会在返回结果前做权限验证，查询也会在优化器前做precheck验证权限。<br>3.如果有权限，那么就开始打开表，执行器会根据表定义的engine引擎，使用这个引擎提供的查询接口。</p><h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><p>主要是负责数据的存储以及提取咯。其架构是插件式的，支持InnoDB、MyISAM、Memory等多个存储引擎，mysql v-5.5.5版本，InnoDB开始成为了默认的引擎。<br>可以通过：engine=存储引擎 的方式来指定存储引擎。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一条sql查询语句是如果执行的？&quot;&gt;&lt;a href=&quot;#一条sql查询语句是如果执行的？&quot; class=&quot;headerlink&quot; title=&quot;一条sql查询语句是如果执行的？&quot;&gt;&lt;/a&gt;一条sql查询语句是如果执行的？&lt;/h2&gt;&lt;p&gt;总体来说，MySQL大致分为
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://binzhizhu.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>PHP学习笔记</title>
    <link href="http://binzhizhu.github.io/2019/11/16/PHP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://binzhizhu.github.io/2019/11/16/PHP学习笔记/</id>
    <published>2019-11-16T14:55:25.000Z</published>
    <updated>2019-11-16T14:55:25.170Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>希望人人都没有疾病的困扰</title>
    <link href="http://binzhizhu.github.io/2019/10/18/%E5%B8%8C%E6%9C%9B%E4%BA%BA%E4%BA%BA%E9%83%BD%E6%B2%A1%E6%9C%89%E7%96%BE%E7%97%85%E7%9A%84%E5%9B%B0%E6%89%B0/"/>
    <id>http://binzhizhu.github.io/2019/10/18/希望人人都没有疾病的困扰/</id>
    <published>2019-10-17T16:00:01.000Z</published>
    <updated>2019-10-17T16:00:28.880Z</updated>
    
    <content type="html"><![CDATA[<p>前几天被告知，自己的一个好友因得抑郁症选择了结束自己的生命。</p><p>我得到这个消息之后，我硬是楞了快一分钟我才缓过来，然后跟我那个朋友说: “请你不要开玩笑”。后面了解了来龙去脉，我才接受了这个我根本不想接受的事实。很多时候，我们都是通过新闻或者其他途径看到一系列诸如此类的新闻报道，感触可能只是一时的，但是我从未想过，这样的事情会发生在我自己的身边，所以我刚开始真的接受不了这个事实，我想我一辈子都忘不了。</p><p>好友生前是我的师弟，我是他刚上大学那会的助班，我们的人物关系是存在很多交集的，所以我很惋惜。在我心里他是一个积极向上、性格开朗、活泼、勤奋好学的学生，你平时跟他相处，完全不会感知到他竟然会是一个抑郁症患者，我们平时的交流中，他并没有向我表达过非常消极的态度，偶尔会跟我咨询一些专业上的问题，他在学业上以及专业上是有自己的规划的。我得知这个消息之后，我重新打开了我们的聊天记录，时间永远停留在了几个月前的那一天。那会的我们谈笑风生，还在讨论敲代码的事情，他还提醒我不要熬夜，我也跟他说以后过来我工作的地方直接找我玩。曾经诙谐的对话，如今却成了永恒。</p><p>“希望人人都没有疾病的困扰” ，这句话是他 Wechat 最后的个性签名。当我看到的时候，我突然觉得很心疼，他一定很痛苦，因为没人了解他内心的痛楚，逐渐的变得很压抑，最后抑郁。抑郁症患者心里有多痛苦，只有他们自己心里知道，但是我希望每个人不管遇到多大的疾病或者困难，都不应该放弃自己，要敢于战胜困难。很多抑郁症患者最终选择结束生命是因为不想连累或者拖累身边的家庭以及朋友，想自己一个人承担所有的痛苦，最后选择结束自己的生命 。我觉得应该要努力的活下去，这样才是为身边的所有人着想，你要知道，你的离开，身边的家人要承受一辈子的悲痛。没有什么难关是跨不过去的，很多人说我可能一辈子都买不了房，我可能没有未来？我也经常自言自语，想想现在的房价以及自己的家庭情况、工作情况等等，然后发问自己：日子什么时候是个头啊，哎，真的太难了。我们可以吐槽发生在自己的身边的事情，缓解压力，但是不能够自暴自弃，年纪轻轻就给了自己一张出局的牌。我自己的想法是：只要还活着就有希望，一家人平安喜乐，足矣。</p><p>原谅我的自言自语，最后，愿他在天堂的没有病痛的困扰，希望人人都没有疾病的困扰🌹</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前几天被告知，自己的一个好友因得抑郁症选择了结束自己的生命。&lt;/p&gt;
&lt;p&gt;我得到这个消息之后，我硬是楞了快一分钟我才缓过来，然后跟我那个朋友说: “请你不要开玩笑”。后面了解了来龙去脉，我才接受了这个我根本不想接受的事实。很多时候，我们都是通过新闻或者其他途径看到一系列诸
      
    
    </summary>
    
    
      <category term="随想" scheme="http://binzhizhu.github.io/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript纯原生的Base64编码加密解密封装代码片段</title>
    <link href="http://binzhizhu.github.io/2019/10/17/JavaScript%E7%BA%AF%E5%8E%9F%E7%94%9F%E7%9A%84Base64%E7%BC%96%E7%A0%81%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E5%B0%81%E8%A3%85%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/"/>
    <id>http://binzhizhu.github.io/2019/10/17/JavaScript纯原生的Base64编码加密解密封装代码片段/</id>
    <published>2019-10-17T02:37:34.000Z</published>
    <updated>2019-10-17T02:38:27.446Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Base64 = &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// private property</span></span><br><span class="line">  _keyStr: <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// public method for encoding</span></span><br><span class="line">  encode: <span class="function"><span class="keyword">function</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> output = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">var</span> chr1, chr2, chr3, enc1, enc2, enc3, enc4;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    input = Base64._utf8_encode(input);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt; input.length) &#123;</span><br><span class="line"></span><br><span class="line">      chr1 = input.charCodeAt(i++);</span><br><span class="line">      chr2 = input.charCodeAt(i++);</span><br><span class="line">      chr3 = input.charCodeAt(i++);</span><br><span class="line"></span><br><span class="line">      enc1 = chr1 &gt;&gt; <span class="number">2</span>;</span><br><span class="line">      enc2 = ((chr1 &amp; <span class="number">3</span>) &lt;&lt; <span class="number">4</span>) | (chr2 &gt;&gt; <span class="number">4</span>);</span><br><span class="line">      enc3 = ((chr2 &amp; <span class="number">15</span>) &lt;&lt; <span class="number">2</span>) | (chr3 &gt;&gt; <span class="number">6</span>);</span><br><span class="line">      enc4 = chr3 &amp; <span class="number">63</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">isNaN</span>(chr2)) &#123;</span><br><span class="line">        enc3 = enc4 = <span class="number">64</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isNaN</span>(chr3)) &#123;</span><br><span class="line">        enc4 = <span class="number">64</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      output = output +</span><br><span class="line">          <span class="keyword">this</span>._keyStr.charAt(enc1) + <span class="keyword">this</span>._keyStr.charAt(enc2) +</span><br><span class="line">          <span class="keyword">this</span>._keyStr.charAt(enc3) + <span class="keyword">this</span>._keyStr.charAt(enc4);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> output;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// public method for decoding</span></span><br><span class="line">  decode: <span class="function"><span class="keyword">function</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> output = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">var</span> chr1, chr2, chr3;</span><br><span class="line">    <span class="keyword">var</span> enc1, enc2, enc3, enc4;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    input = input.replace(<span class="regexp">/[^A-Za-z0-9\+\/\=]/g</span>, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt; input.length) &#123;</span><br><span class="line"></span><br><span class="line">      enc1 = <span class="keyword">this</span>._keyStr.indexOf(input.charAt(i++));</span><br><span class="line">      enc2 = <span class="keyword">this</span>._keyStr.indexOf(input.charAt(i++));</span><br><span class="line">      enc3 = <span class="keyword">this</span>._keyStr.indexOf(input.charAt(i++));</span><br><span class="line">      enc4 = <span class="keyword">this</span>._keyStr.indexOf(input.charAt(i++));</span><br><span class="line"></span><br><span class="line">      chr1 = (enc1 &lt;&lt; <span class="number">2</span>) | (enc2 &gt;&gt; <span class="number">4</span>);</span><br><span class="line">      chr2 = ((enc2 &amp; <span class="number">15</span>) &lt;&lt; <span class="number">4</span>) | (enc3 &gt;&gt; <span class="number">2</span>);</span><br><span class="line">      chr3 = ((enc3 &amp; <span class="number">3</span>) &lt;&lt; <span class="number">6</span>) | enc4;</span><br><span class="line"></span><br><span class="line">      output = output + <span class="built_in">String</span>.fromCharCode(chr1);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (enc3 != <span class="number">64</span>) &#123;</span><br><span class="line">        output = output + <span class="built_in">String</span>.fromCharCode(chr2);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (enc4 != <span class="number">64</span>) &#123;</span><br><span class="line">        output = output + <span class="built_in">String</span>.fromCharCode(chr3);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    output = Base64._utf8_decode(output);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> output;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// private method for UTF-8 encoding</span></span><br><span class="line">  _utf8_encode: <span class="function"><span class="keyword">function</span> (<span class="params">string</span>) </span>&#123;</span><br><span class="line">    string = string.replace(<span class="regexp">/\r\n/g</span>, <span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">var</span> utftext = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> n = <span class="number">0</span>; n &lt; string.length; n++) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> c = string.charCodeAt(n);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (c &lt; <span class="number">128</span>) &#123;</span><br><span class="line">        utftext += <span class="built_in">String</span>.fromCharCode(c);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((c &gt; <span class="number">127</span>) &amp;&amp; (c &lt; <span class="number">2048</span>)) &#123;</span><br><span class="line">        utftext += <span class="built_in">String</span>.fromCharCode((c &gt;&gt; <span class="number">6</span>) | <span class="number">192</span>);</span><br><span class="line">        utftext += <span class="built_in">String</span>.fromCharCode((c &amp; <span class="number">63</span>) | <span class="number">128</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        utftext += <span class="built_in">String</span>.fromCharCode((c &gt;&gt; <span class="number">12</span>) | <span class="number">224</span>);</span><br><span class="line">        utftext += <span class="built_in">String</span>.fromCharCode(((c &gt;&gt; <span class="number">6</span>) &amp; <span class="number">63</span>) | <span class="number">128</span>);</span><br><span class="line">        utftext += <span class="built_in">String</span>.fromCharCode((c &amp; <span class="number">63</span>) | <span class="number">128</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> utftext;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// private method for UTF-8 decoding</span></span><br><span class="line">  _utf8_decode: <span class="function"><span class="keyword">function</span> (<span class="params">utftext</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> string = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> c = c1 = c2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt; utftext.length) &#123;</span><br><span class="line"></span><br><span class="line">      c = utftext.charCodeAt(i);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (c &lt; <span class="number">128</span>) &#123;</span><br><span class="line">        string += <span class="built_in">String</span>.fromCharCode(c);</span><br><span class="line">        i++;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((c &gt; <span class="number">191</span>) &amp;&amp; (c &lt; <span class="number">224</span>)) &#123;</span><br><span class="line">        c2 = utftext.charCodeAt(i + <span class="number">1</span>);</span><br><span class="line">        string += <span class="built_in">String</span>.fromCharCode(((c &amp; <span class="number">31</span>) &lt;&lt; <span class="number">6</span>) | (c2 &amp; <span class="number">63</span>));</span><br><span class="line">        i += <span class="number">2</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        c2 = utftext.charCodeAt(i + <span class="number">1</span>);</span><br><span class="line">        c3 = utftext.charCodeAt(i + <span class="number">2</span>);</span><br><span class="line">        string += <span class="built_in">String</span>.fromCharCode(((c &amp; <span class="number">15</span>) &lt;&lt; <span class="number">12</span>) | ((c2 &amp; <span class="number">63</span>) &lt;&lt; <span class="number">6</span>) | (c3 &amp; <span class="number">63</span>));</span><br><span class="line">        i += <span class="number">3</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> string;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://binzhizhu.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>[To Troll : 不要断章取义、胡乱指责他人，做个通情达理的人]</title>
    <link href="http://binzhizhu.github.io/2019/08/31/To-Troll-%E4%B8%8D%E8%A6%81%E6%96%AD%E7%AB%A0%E5%8F%96%E4%B9%89%E3%80%81%E8%83%A1%E4%B9%B1%E6%8C%87%E8%B4%A3%E4%BB%96%E4%BA%BA%EF%BC%8C%E5%81%9A%E4%B8%AA%E9%80%9A%E6%83%85%E8%BE%BE%E7%90%86%E7%9A%84%E4%BA%BA/"/>
    <id>http://binzhizhu.github.io/2019/08/31/To-Troll-不要断章取义、胡乱指责他人，做个通情达理的人/</id>
    <published>2019-08-31T03:04:13.000Z</published>
    <updated>2019-08-31T03:04:48.795Z</updated>
    
    <content type="html"><![CDATA[<p>今早起来刷到一篇帖子[讲述农村女孩缴费问题]，我看到标题以及阅读量我甚至还没点进去，我就大概猜到了意见分歧引发斗争的问题了，因为这种现象在v见怪不怪了。但是我还是想发个帖子，总结一下这类事情的因素。  </p><p>我之前也发过一些帖子，有这么一类人：</p><p>1.根本不在乎你说什么，压根不关心帖子的内容，只抓漏洞、把柄，然后化身为一名政治家，狂批狠斗</p><p>2.没有什么立场，也没有那么多为什么，喷就是了[我之前发了个贴，下面有个人评论：<strong>我觉得你是个智障，能有工作就不错了</strong>]  我一般是对这类人没有什么同情心的 我直接怼他 结果他@站长 说道[<strong>你为什么骂我沙雕？站长不管管吗</strong>]  不在乎别人的感受  高水平的认知性同理心，让这些人很擅长伤害别人的感情，这就是一种心理变态   </p><p>3.出口成脏、口吐芬芳的低端人群，就是要激怒你，引起争论  </p><p>4.自我感觉良好，以挑刺找茬为乐趣，通过发表反对观点进行自我实现   </p><p>5.Click bait 标题党，揣摩你的心理，然后跟你说 “你这个帖子内容不配这个标题 “/ “你不配贴这个标签”  [我之前有个帖子说 我是一个重度音乐爱好者，内容是我买了AirPods]  然后就有人说重度音乐者不会买蓝牙耳机，我说我是重度耳机爱好者了吗？单纯喜欢音乐就不是重度？非得会打篮球、踢足球才能可以说自己是爱好者？另外我还经常看到一些求教请指导类似标签的帖子，lz的出发点可能就是请教一个问题，即使问的问题比较傻瓜，也没必要辱骂别人，教他人做人吧？经常部分高端知识分子回帖：[你自己没有电脑吗？你作为一名开发，这种问题都解决不了，你配当个开发吗？这么低端的问题，大学的时候就应该要知道怎么去处理，吧啦吧啦一大堆]，但实际上人家可能就是仅仅问了一个问题 例如我举个例子：”线上出bug 如何排错，请教一下”。我真的揣摩不了那个人的心理，想什么呢？把自己当什么呢？</p><p>你可以不欣赏别人、不接受别人的观点，但是非得不接受就得踩别人吗？你不喜欢我说的内容、我的观点你可以不要说话，继续做你的事情，非得要留下几句你的<strong>名言警句</strong>吗？非得要这么说吗？你知不知道或许有些人的性格内向或者心理有些问题，发个贴寻求大家的意见或者帮助，你没有任何立场就去抨击别人，批斗别人，万一对他人造成二次伤害呢？真的恳求这些人不要只在乎自己的感受，不管是在这里还是平时生活当中，做什么事情之前能否多思考一下会不会产生什么后果？如果遇到这类人,也不要太在乎他们的看法，兼听则明，偏信则暗，做自己的事情，让别人去说吧。</p><p>这仅仅是我自己的观点，恳求大家不要揣摩我的心理，我没有什么优越感，我就是一个普通人，如果我有说错或者有违规的地方，也恳大家指正。peace &amp; love</p><p>A troll keeps commenting on my posts , I  know how to ban him.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今早起来刷到一篇帖子[讲述农村女孩缴费问题]，我看到标题以及阅读量我甚至还没点进去，我就大概猜到了意见分歧引发斗争的问题了，因为这种现象在v见怪不怪了。但是我还是想发个帖子，总结一下这类事情的因素。  &lt;/p&gt;
&lt;p&gt;我之前也发过一些帖子，有这么一类人：&lt;/p&gt;
&lt;p&gt;1.
      
    
    </summary>
    
    
      <category term="随想" scheme="http://binzhizhu.github.io/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>GitHub 如何向开源项目提PR</title>
    <link href="http://binzhizhu.github.io/2019/07/29/GitHub-%E5%A6%82%E4%BD%95%E5%90%91%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E6%8F%90PR/"/>
    <id>http://binzhizhu.github.io/2019/07/29/GitHub-如何向开源项目提PR/</id>
    <published>2019-07-29T05:16:19.000Z</published>
    <updated>2019-07-29T05:16:38.818Z</updated>
    
    <content type="html"><![CDATA[<ul><li>fork 到自己的仓库</li><li>git clone 到本地</li><li>上游建立连接<br><code>git remote add upstream 开源项目地址</code></li><li>创建开发分支 (非必须)<br><code>git checkout -b dev</code></li><li>修改提交代码<br><code>git status</code> <code>git add .</code> <code>git commit -m</code> <code>git push origin branch</code></li><li>同步代码三部曲<br><code>git fetch upstream</code> <code>git rebase upstream/master</code> <code>git push origin master</code></li><li>提交pr<br>去自己github仓库对应fork的项目下new pull request</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;fork 到自己的仓库&lt;/li&gt;
&lt;li&gt;git clone 到本地&lt;/li&gt;
&lt;li&gt;上游建立连接&lt;br&gt;&lt;code&gt;git remote add upstream 开源项目地址&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;创建开发分支 (非必须)&lt;br&gt;&lt;code&gt;gi
      
    
    </summary>
    
    
      <category term="分享" scheme="http://binzhizhu.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>好难受 : ) VPS、服务器、域名，即将陆续过期</title>
    <link href="http://binzhizhu.github.io/2019/07/28/%E5%A5%BD%E9%9A%BE%E5%8F%97-VPS%E3%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8%E3%80%81%E5%9F%9F%E5%90%8D%EF%BC%8C%E5%8D%B3%E5%B0%86%E9%99%86%E7%BB%AD%E8%BF%87%E6%9C%9F/"/>
    <id>http://binzhizhu.github.io/2019/07/28/好难受-VPS、服务器、域名，即将陆续过期/</id>
    <published>2019-07-27T16:13:33.000Z</published>
    <updated>2019-07-27T16:17:22.571Z</updated>
    
    <content type="html"><![CDATA[<h2 id="VPS"><a href="#VPS" class="headerlink" title="VPS"></a>VPS</h2><p><img src="http://img.binzhizhu.top/imgs/2019/07/b2160b1f9b545d3a.png" alt="">  </p><p>bwg 购入的，体验 90 分，平时开发、porn 一下也是差不多的了，6 月被关进小黑屋，在我就要放弃的那一刻，7 月竟然突然 ping 通了，我重燃希望之火。八月入月就要过期了，一直以为跟传统的续费方式一样（你就只能优惠一次，你不配继续享受优惠价格），刚刚登陆 dashboard 看了一下，有点开心嘿嘿，仍然是 19.99 $/ year，awesome ！</p><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p><img src="http://img.binzhizhu.top/imgs/2019/07/49ed25f8ff1887a7.png" alt="">  </p><p>去年阿里云双 11，拼团撸羊毛撸了一个 1 核 2G 的 ECS 学习机，当时记得是 90 多一年，不过后面返利什么的，不知不觉就回本了~~~。刚看了一下，续费的话需要将近 900 左右，这谁顶不住呀 ：~，所以打算今年双 11 再撸一把，然后迁移过去新的机器，我没有这方面的经验，想请教下 v 站的哥哥们。服务器搭了博客、v2ray、图床、frp 内网穿透、以及一些自己的独立项目等乱七八糟的东西，所以我有点怕，拜托各位咯🙏~</p><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>域名这块的其实还好，也是阿里云的，没有入手顶级域名，所以续费也没有很大的问题。之前看 v 站有些朋友发华为云推域名的活动，我也撸了一下，认证后免费撸了一个.com 域名（ 3 年吧记得），不过一直没有去搭理，备案啥的，这个也无所谓，到时有空再搞一下。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;VPS&quot;&gt;&lt;a href=&quot;#VPS&quot; class=&quot;headerlink&quot; title=&quot;VPS&quot;&gt;&lt;/a&gt;VPS&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://img.binzhizhu.top/imgs/2019/07/b2160b1f9b545d3a.p
      
    
    </summary>
    
    
      <category term="分享" scheme="http://binzhizhu.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>优雅的提交你的Git-commit</title>
    <link href="http://binzhizhu.github.io/2019/06/30/%E4%BC%98%E9%9B%85%E7%9A%84%E6%8F%90%E4%BA%A4%E4%BD%A0%E7%9A%84Git-commit/"/>
    <id>http://binzhizhu.github.io/2019/06/30/优雅的提交你的Git-commit/</id>
    <published>2019-06-30T03:55:39.000Z</published>
    <updated>2019-06-30T07:20:15.652Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Commitizen-替代你的-git-commit"><a href="#Commitizen-替代你的-git-commit" class="headerlink" title="Commitizen: 替代你的 git commit"></a>Commitizen: 替代你的 git commit</h2><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://link.zhihu.com/?target=https%3A//github.com/commitizen/cz-cli" target="_blank" rel="noopener">commitizen/cz-cli</a>, 我们需要借助它提供的 git cz 命令替代我们的 git commit 命令, 帮助我们生成符合规范的 commit message.</p><p>除此之外, 我们还需要为 commitizen 指定一个 Adapter 比如: <a href="https://link.zhihu.com/?target=https%3A//github.com/commitizen/cz-conventional-changelog" target="_blank" rel="noopener">cz-conventional-changelog</a> (一个符合 Angular团队规范的 preset). 使得 commitizen 按照我们指定的规范帮助我们生成 commit message.</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g commitizen cz-conventional-changelog</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&#123; "path": "cz-conventional-changelog" &#125;'</span> &gt; ~/.czrc</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>通常我们提交代码是使用 git commit -m 的形式，现在直接使用git cz 即可替代。</p><h2 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h2><ul><li>type: commit 的类型</li><li>feat: 新特性</li><li>fix: 修改问题</li><li>refactor: 代码重构</li><li>docs: 文档修改</li><li>style: 代码格式修改, 注意不是 css 修改</li><li>test: 测试用例修改</li><li>chore: 其他修改, 比如构建流程, 依赖管理.</li><li>scope: commit 影响的范围, 比如: route, component, utils, build…</li><li>subject: commit 的概述, 建议符合 <a href="https://link.zhihu.com/?target=https%3A//stackoverflow.com/questions/2290016/git-commit-messages-50-72-formatting" target="_blank" rel="noopener">50/72 formatting</a></li><li>body: commit 具体修改内容, 可以分为多行, 建议符合 <a href="https://link.zhihu.com/?target=https%3A//stackoverflow.com/questions/2290016/git-commit-messages-50-72-formatting" target="_blank" rel="noopener">50/72 formatting</a></li><li>footer: 一些备注, 通常是 BREAKING CHANGE 或修复的 bug 的链接.</li></ul><h3 id="standard-version-自动生成-CHANGELOG"><a href="#standard-version-自动生成-CHANGELOG" class="headerlink" title="standard-version: 自动生成 CHANGELOG"></a>standard-version: 自动生成 CHANGELOG</h3><h4 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S standard-version</span><br></pre></td></tr></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>package.json :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scirpt&quot;: &#123;</span><br><span class="line">    ...,</span><br><span class="line">    &quot;release&quot;: &quot;standard-version&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run release</span><br></pre></td></tr></table></figure><p>你会发现你git cz 的提交会自动生成一个CHANGELOG.md</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Commitizen-替代你的-git-commit&quot;&gt;&lt;a href=&quot;#Commitizen-替代你的-git-commit&quot; class=&quot;headerlink&quot; title=&quot;Commitizen: 替代你的 git commit&quot;&gt;&lt;/a&gt;Commiti
      
    
    </summary>
    
    
      <category term="git" scheme="http://binzhizhu.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>折腾了一天，撸了个v2ex小程序</title>
    <link href="http://binzhizhu.github.io/2019/06/29/%E6%8A%98%E8%85%BE%E4%BA%86%E4%B8%80%E5%A4%A9%EF%BC%8C%E6%92%B8%E4%BA%86%E4%B8%AAv2ex%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <id>http://binzhizhu.github.io/2019/06/29/折腾了一天，撸了个v2ex小程序/</id>
    <published>2019-06-29T13:45:53.000Z</published>
    <updated>2019-06-30T15:46:47.023Z</updated>
    
    <content type="html"><![CDATA[<h2 id="V2EX小程序"><a href="#V2EX小程序" class="headerlink" title="V2EX小程序"></a>V2EX小程序</h2><p>基于Taro实现的v2ex小程序</p><h3 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h3><p>Taro-v2ex-weapp: <a href="https://github.com/BinZhiZhu/Taro-v2ex-weapp" target="_blank" rel="noopener">https://github.com/BinZhiZhu/Taro-v2ex-weapp</a></p><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>├── dist                   编译结果目录<br>├── config                 配置目录<br>|   ├── dev.js             开发时配置<br>|   ├── index.js           默认配置<br>|   └── prod.js            打包时配置<br>├── src                    源码目录<br>|   ├── pages              页面文件目录<br>|   |   ├── index          index 页面目录<br>|   |   |   ├── index.js   index 页面逻辑<br>|   |   |   └── index.css  index 页面样式<br>|   ├── app.css            项目总通用样式<br>|   └── app.js             项目入口文件<br>└── package.json  </p><h3 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h3><p>Taro(React) + typescript（部分）</p><p>状态管理：Redux</p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>v2ex开放API支持(如果侵权请联系本人修正)</p><h2 id="DEPLOY"><a href="#DEPLOY" class="headerlink" title="DEPLOY"></a>DEPLOY</h2><ul><li><p>安装Taro(参考官方)</p></li><li><p>dev环境: npm run dev:weapp</p></li><li><p>打包： npm run build:weapp</p></li></ul><h3 id="开发时间线"><a href="#开发时间线" class="headerlink" title="开发时间线"></a>开发时间线</h3><p>1.首页最新主题</p><p>2.主题详情</p><p>3.热门主题</p><p>4.节点</p><p>5.节点详情</p><h3 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h3><ul><li><p>首页: <img src="http://img.binzhizhu.top/imgs/2019/06/54b6624c1e3bf106.png" alt=""></p></li><li><p>热门: <img src="http://img.binzhizhu.top/imgs/2019/06/03d291e0ea9fb45d.png" alt=""></p></li><li><p>节点: <img src="http://img.binzhizhu.top/imgs/2019/06/b9e187a6a727d0ee.png" alt=""></p></li><li><p>节点详情: <img src="http://img.binzhizhu.top/imgs/2019/06/85a2c7f481a50797.png" alt=""></p></li></ul><ul><li>话题回复: <img src="http://img.binzhizhu.top/imgs/2019/06/04b64c2985121708.png" alt=""></li><li></li><li>个人主页: <img src="http://img.binzhizhu.top/imgs/2019/06/29748a4f9195f604.png" alt=""></li><li>h5-首页: <img src="http://img.binzhizhu.top/imgs/2019/06/f40382d6240bbdc8.jpg" alt=""></li><li>h5-热门： <img src="http://img.binzhizhu.top/imgs/2019/06/7bdea439e6db9f65.jpg" alt=""></li><li>h5-节点：<img src="http://img.binzhizhu.top/imgs/2019/06/58a217abf6146bc1.jpg" alt=""></li></ul><h3 id="release"><a href="#release" class="headerlink" title="release"></a>release</h3><p>发布版本</p><ul><li>1.0.0 </li></ul><p><img src="http://img.binzhizhu.top/imgs/2019/06/3c9ddb8b3d48dc3e.jpg" alt=""></p><h3 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h3><p>1.下拉加载</p><p>2.TypeScript 重构</p><p>3.拆分组件</p><p>4.H5版本</p><ol start="4"><li>TDD</li></ol><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h3 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h3><ul><li><p>计算时间戳时分秒func来源于v2er封装 原贴 <a href="https://www.v2ex.com/t/578465#reply6" target="_blank" rel="noopener">https://www.v2ex.com/t/578465#reply6</a></p></li><li><p>utils下的api.ts封装来源于 taro官方taro-v2ex-hook repo里的简单封装</p></li></ul><h3 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h3><ul><li><p>v2ex  <a href="https://www.v2ex.com/p/7v9TEc53" target="_blank" rel="noopener">https://www.v2ex.com/p/7v9TEc53</a></p></li><li><p>taro  <a href="https://nervjs.github.io/taro/docs/GETTING-STARTED.html" target="_blank" rel="noopener">https://nervjs.github.io/taro/docs/GETTING-STARTED.html</a></p></li></ul><h3 id="License"><a href="#License" class="headerlink" title="License"></a>License</h3><p>MIT</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;V2EX小程序&quot;&gt;&lt;a href=&quot;#V2EX小程序&quot; class=&quot;headerlink&quot; title=&quot;V2EX小程序&quot;&gt;&lt;/a&gt;V2EX小程序&lt;/h2&gt;&lt;p&gt;基于Taro实现的v2ex小程序&lt;/p&gt;
&lt;h3 id=&quot;仓库&quot;&gt;&lt;a href=&quot;#仓库&quot; cla
      
    
    </summary>
    
    
      <category term="v2ex" scheme="http://binzhizhu.github.io/tags/v2ex/"/>
    
      <category term="taro" scheme="http://binzhizhu.github.io/tags/taro/"/>
    
      <category term="小程序" scheme="http://binzhizhu.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB基础学习笔记</title>
    <link href="http://binzhizhu.github.io/2019/06/24/MongoDB%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://binzhizhu.github.io/2019/06/24/MongoDB基础学习笔记/</id>
    <published>2019-06-23T16:20:40.000Z</published>
    <updated>2019-06-24T13:23:17.228Z</updated>
    
    <content type="html"><![CDATA[<h2 id="非关系型数据库-NoSql-：MongoDB"><a href="#非关系型数据库-NoSql-：MongoDB" class="headerlink" title="非关系型数据库(NoSql)：MongoDB"></a>非关系型数据库(NoSql)：MongoDB</h2><h3 id="与关系型数据库的比较"><a href="#与关系型数据库的比较" class="headerlink" title="与关系型数据库的比较"></a>与关系型数据库的比较</h3><p>关系型数据库(MySQL)：数据库、数据表（table）、数据行</p><p>MongoDB：数据库、集合（collections）、文件</p><p>我们发现本质的关系还是不变的</p><h3 id="安装与运行"><a href="#安装与运行" class="headerlink" title="安装与运行"></a>安装与运行</h3><p>我这边的开发环境是统一使用docker部署的，所以只需要在docker-composer补充MongoDB的配置即可，代码如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 十分吃内存的nosql数据库</span></span><br><span class="line"><span class="attr"> mongo:</span></span><br><span class="line"><span class="attr">   image:</span> <span class="string">mongo</span></span><br><span class="line"><span class="attr">   environment:</span></span><br><span class="line"><span class="attr">     MONGO_INITDB_ROOT_USERNAME:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">     MONGO_INITDB_ROOT_PASSWORD:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">   ports:</span></span><br><span class="line"><span class="bullet">     -</span> <span class="number">27017</span><span class="string">:27017</span></span><br><span class="line"><span class="attr">   volumes:</span></span><br><span class="line"><span class="bullet">     -</span> <span class="string">./mongo:/data/db</span></span><br></pre></td></tr></table></figure><ul><li>在该yaml文件目录下启动docker-composer容器配置：docker-composer up -d</li><li>docker ps确认容器有没有启动</li><li>启动MongoDB咯：docker run mongo 或者 docker exec -it 容器ID (我是喜欢用这个)</li></ul><p>推荐直接使用：docker exec -it 容器ID mongo admin，这个时候我们数据库的操作会发现没有权限，这个问题刚开始困扰我很久，因为是新手。后来发现实际上是因为我们连接之后没有鉴权，我们需要使用一个身份去鉴权，也就是我们docker-composer里的root用户，所以我们需要：db.auth(“root”,”123456”) ,这样就代表鉴权成功，可以继续操作curd了。</p><p>简单的操作失败信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> use admin</span><br><span class="line">switched to db admin</span><br><span class="line"><span class="meta">&gt;</span> db</span><br><span class="line">admin</span><br><span class="line"><span class="meta">&gt;</span> db.createCollection("test")</span><br><span class="line">&#123;</span><br><span class="line">"ok" : 0,</span><br><span class="line">"errmsg" : "command create requires authentication",</span><br><span class="line">"code" : 13,</span><br><span class="line">"codeName" : "Unauthorized"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显提示没有权限操作咯</p><h3 id="命令行基础命令"><a href="#命令行基础命令" class="headerlink" title="命令行基础命令"></a>命令行基础命令</h3><ul><li>show dbs :显示已有数据库，如果你刚安装好，会默认有local、admin(config)，这是MongoDB的默认数据库，我们在新建库时是不允许起这些名称的。</li><li>use admin： 进入数据，也可以理解成为使用数据库。成功会显示：switched to db admin。</li><li>show collections: 显示数据库中的集合（关系型中叫表，我们要逐渐熟悉）。</li><li><p>db:显示当前位置，也就是你当前使用的数据库名称，这个命令算是最常用的，因为你在作任何操作的时候都要先查看一下自己所在的库，以免造成操作错误。</p></li><li><p>use db（建立数据库）：use不仅可以进入一个数据库，如果你敲入的库不存在，它还可以帮你建立一个库。但是在没有集合前，它还是默认为空。</p></li><li>db.集合.insert( ):新建数据集合和插入文件（数据），当集合没有时，这时候就可以新建一个集合，并向里边插入数据。Demo：db.user.insert({ “name”:”jacky”,”hobby”:”唱、跳、rap、篮球”});</li><li>db.集合.find( ):查询所有数据，这条命令会列出集合下的所有数据，可以看到MongoDB是自动给我们加入了索引值的。Demo：db.user.find()</li><li>db.集合.findOne( ):查询第一个文件数据，这里需要注意的，所有MongoDB的组合单词都使用首字母小写的驼峰式写法。</li><li><p>db.集合.update({查询},{修改}):修改文件数据，第一个是查询条件，第二个是要修改成的值。这里注意的是可以多加文件数据项的，比如下面的例子。</p></li><li><p>db.集合.remove(条件)：删除文件数据，注意的是要跟一个条件。Demo: db.user.remove({<br>… “name”:”mike”}<br>… );</p></li><li>db.集合.drop( ):删除整个集合，这个在实际工作中一定要谨慎使用，如果是程序，一定要二次确认。</li><li>db.dropDatabase( ):删除整个数据库，在删除库时，一定要先进入数据库，然后再删除。实际工作中这个基本不用，实际工作可定需要保留数据和痕迹的</li></ul><p><img src="http://img.binzhizhu.top/imgs/2019/06/9b137700ebf6ea6a.jpg" alt=""></p><h3 id="使用JavaScript敲打MongoDB命令"><a href="#使用JavaScript敲打MongoDB命令" class="headerlink" title="使用JavaScript敲打MongoDB命令"></a>使用JavaScript敲打MongoDB命令</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;非关系型数据库-NoSql-：MongoDB&quot;&gt;&lt;a href=&quot;#非关系型数据库-NoSql-：MongoDB&quot; class=&quot;headerlink&quot; title=&quot;非关系型数据库(NoSql)：MongoDB&quot;&gt;&lt;/a&gt;非关系型数据库(NoSql)：Mongo
      
    
    </summary>
    
    
      <category term="MongoDB" scheme="http://binzhizhu.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>Shell学习笔记</title>
    <link href="http://binzhizhu.github.io/2019/06/23/Shell%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://binzhizhu.github.io/2019/06/23/Shell学习笔记/</id>
    <published>2019-06-23T15:20:46.000Z</published>
    <updated>2019-07-04T05:34:56.589Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Shell命令"><a href="#Shell命令" class="headerlink" title="Shell命令"></a>Shell命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>变量名:不需要使用$符号，"="不能有空格</span><br><span class="line">my_name="BinZhiZhu"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>输出:需要$符号</span><br><span class="line">echo $my_name</span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#单引号</span></span><br><span class="line"></span><br><span class="line">str=<span class="string">'I try to learn shell '</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$str</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#双引号:可以有变量,可以有转义字符</span></span><br><span class="line"></span><br><span class="line">str=<span class="string">"My name is \"<span class="variable">$my_name</span>\",Nice to meet u"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$str</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#拼接</span></span><br><span class="line"></span><br><span class="line">str1=<span class="string">"What's ur name,bro? My name is "</span><span class="variable">$my_name</span><span class="string">"!"</span></span><br><span class="line"></span><br><span class="line">str2=<span class="string">"What's ur name,bro? My name is "</span>&#123;<span class="variable">$my_name</span>&#125;<span class="string">"!"</span></span><br><span class="line"></span><br><span class="line">str3=<span class="string">"What's ur name,bro? My name is &#123;<span class="variable">$my_name</span>&#125;!"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$str1</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$str2</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$str3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取长度:$&#123;# + 变量&#125;</span></span><br><span class="line"></span><br><span class="line">str=<span class="string">'qwer'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#str&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#提取子字符串:</span></span><br><span class="line"></span><br><span class="line">str=<span class="string">"my name is <span class="variable">$my_name</span> "</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#提取名字：BinZhiZhu</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;str:11&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#提取指定索引范围:name</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;str:3:5&#125;</span></span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#括号括起来 元素之间用空格相隔</span></span><br><span class="line">array=(a b c d)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#可以直接赋值</span></span><br><span class="line">array1[0]=1</span><br><span class="line">array1[1]=2</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"所有元素为：<span class="variable">$&#123;array[*]&#125;</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"第一个元素为：<span class="variable">$&#123;array[0]&#125;</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"第二个元素为：<span class="variable">$&#123;array[1]&#125;</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"第三个元素为：<span class="variable">$&#123;array[2]&#125;</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"第四个元素为：<span class="variable">$&#123;array[3]&#125;</span>"</span></span><br></pre></td></tr></table></figure><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><h3 id="if的使用"><a href="#if的使用" class="headerlink" title="if的使用"></a>if的使用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">运算符 : -gt:大于; -lt:小于; -eq:等于</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="keyword">if</span>使用</span></span><br><span class="line"></span><br><span class="line">a=6</span><br><span class="line">b=4</span><br><span class="line"></span><br><span class="line">if [ $a -gt $b ]</span><br><span class="line">then</span><br><span class="line">     echo "a大于b咯"</span><br><span class="line">elif [ $a -eq $b ]</span><br><span class="line">then</span><br><span class="line">     echo "a等于b咯"</span><br><span class="line">elif [ $a -lt $b ]</span><br><span class="line">then</span><br><span class="line">     echo "a小于b咯"</span><br><span class="line">else</span><br><span class="line">     echo "没有找到该条件判断"</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">test</span>命令</span></span><br><span class="line"></span><br><span class="line">let num1=2*3</span><br><span class="line">let num2=3+3</span><br><span class="line"></span><br><span class="line">if test $num1 -eq $num2</span><br><span class="line">then</span><br><span class="line">    echo '两个数字相等!'</span><br><span class="line">else</span><br><span class="line">    echo '两个数字不相等!'</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">等价于</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">let num3=2*3</span><br><span class="line">let num4=3+2</span><br><span class="line"></span><br><span class="line">if [ $num3 -eq $num4 ]</span><br><span class="line">then</span><br><span class="line">    echo '两个数字相等!'</span><br><span class="line">else</span><br><span class="line">    echo '两个数字不相等!'</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">arr=(1 2 3 4)</span><br><span class="line">for loop in $&#123;arr[*]&#125;</span><br><span class="line">do</span><br><span class="line">    echo "The Number is: $loop"</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">写成一行</span></span><br><span class="line">for loop in $&#123;arr[*]&#125;;do echo "Number is: $loop";done;</span><br></pre></td></tr></table></figure><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">当num小于等于5条件为<span class="literal">true</span></span></span><br><span class="line">num=1</span><br><span class="line"></span><br><span class="line"><span class="meta">while(($</span><span class="bash">num &lt;= 5 ))</span></span><br><span class="line">do</span><br><span class="line">   echo "num is:$num"</span><br><span class="line">   let num++</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">读取键盘信息</span></span><br><span class="line"></span><br><span class="line">echo '按下 &lt;CTRL-D&gt; 退出'</span><br><span class="line">echo -n '输入你最喜欢的网站名: '</span><br><span class="line">while read FILM</span><br><span class="line">do</span><br><span class="line">    echo "是的！$FILM 是一个好网站"</span><br><span class="line">    break</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h4 id="until循环"><a href="#until循环" class="headerlink" title="until循环"></a>until循环</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">until 循环执行一系列命令直至条件为 <span class="literal">true</span> 时停止，与<span class="keyword">while</span>相反</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">输入1-10数字咯</span></span><br><span class="line">a=0</span><br><span class="line">b=10</span><br><span class="line"></span><br><span class="line">until [ $a -eq $b ]</span><br><span class="line">do</span><br><span class="line">    echo " value is : $a"</span><br><span class="line">    let a++</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h4 id="case循环"><a href="#case循环" class="headerlink" title="case循环"></a>case循环</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="keyword">esac</span>的意思与<span class="keyword">case</span>相反 也就是结束执行</span></span><br><span class="line">echo "case 循环"</span><br><span class="line"></span><br><span class="line">echo '输入 1 到 4 之间的数字:'</span><br><span class="line">echo '你输入的数字为:'</span><br><span class="line">read aNum</span><br><span class="line">case $aNum in</span><br><span class="line">    1)  echo '你选择了 1'</span><br><span class="line">    ;;</span><br><span class="line">    2)  echo '你选择了 2'</span><br><span class="line">    ;;</span><br><span class="line">    3)  echo '你选择了 3'</span><br><span class="line">    ;;</span><br><span class="line">    4)  echo '你选择了 4'</span><br><span class="line">    ;;</span><br><span class="line">    *)  echo '你没有输入 1 到 4 之间的数字'</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#输入 1 到 5 之间的数字才可结束循环</span></span></span><br><span class="line">while :</span><br><span class="line">do</span><br><span class="line">    echo -n "输入 1 到 5 之间的数字:"</span><br><span class="line">    read aNum</span><br><span class="line">    case $aNum in</span><br><span class="line">        1|2|3|4|5) echo "你输入的数字为 $aNum!"</span><br><span class="line">        ;;</span><br><span class="line">        *) echo "你输入的数字不是 1 到 5 之间的! 游戏结束"</span><br><span class="line">            break</span><br><span class="line">        ;;</span><br><span class="line">    esac</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h4 id="简单的删除文件"><a href="#简单的删除文件" class="headerlink" title="简单的删除文件"></a>简单的删除文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">filePath=&quot;del.php&quot;</span><br><span class="line"></span><br><span class="line">echo &apos;确认删除del.php文件吗？(y/n)&apos;</span><br><span class="line">read check</span><br><span class="line">case $check in</span><br><span class="line">     &apos;y&apos;)</span><br><span class="line">         rm $filePath;;</span><br><span class="line">     &apos;n&apos;)</span><br><span class="line">         echo &apos;取消删除&apos;;;</span><br><span class="line">      *)</span><br><span class="line">         echo &apos;请输入y/n&apos;;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><h2 id="DOC"><a href="#DOC" class="headerlink" title="DOC"></a>DOC</h2><p>[github-shell学习笔记]  <a href="https://github.com/BinZhiZhu/Shell_study_notes" target="_blank" rel="noopener">https://github.com/BinZhiZhu/Shell_study_notes</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Shell命令&quot;&gt;&lt;a href=&quot;#Shell命令&quot; class=&quot;headerlink&quot; title=&quot;Shell命令&quot;&gt;&lt;/a&gt;Shell命令&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
      
    
    </summary>
    
    
      <category term="Shell" scheme="http://binzhizhu.github.io/tags/Shell/"/>
    
      <category term="Linux" scheme="http://binzhizhu.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>想自己独立开发个小程序咯~</title>
    <link href="http://binzhizhu.github.io/2019/06/20/%E6%83%B3%E8%87%AA%E5%B7%B1%E7%8B%AC%E7%AB%8B%E5%BC%80%E5%8F%91%E4%B8%AA%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%92%AF/"/>
    <id>http://binzhizhu.github.io/2019/06/20/想自己独立开发个小程序咯/</id>
    <published>2019-06-20T15:12:14.000Z</published>
    <updated>2019-06-20T15:19:08.883Z</updated>
    
    <content type="html"><![CDATA[<h2 id="想法从而而来"><a href="#想法从而而来" class="headerlink" title="想法从而而来"></a>想法从而而来</h2><p>主要是做开发这么久了，自己还没有一个完整的独立开发的项目。有机会接触了几个月的Taro多端编译型框架的开发，语法是基于react的，所以开发起来也比较舒服，一次编码多端可见。所以突然琢磨了一下，抓一下空闲时间自己独立开发个小程序，但是缺少想法，不知道搞啥，今晚刚刚搞了个demo，因为太无聊，然后v站发了个帖子问问大家，交流下意见咯。h5撸了两个页面，主要是展示下组件而已，然后小程序预览了一下，不得不说Taro 是真的NB,几乎是没有差别的。</p><p><img src="http://img.binzhizhu.top/imgs/2019/06/8c2dd7e1d22b3078.jpeg" alt=""></p><p>贴一些交流的帖子吧 有好的想法才会有目标去完成。。希望自己能够坚持吧 </p><p>[ v站交流帖子 ]：<a href="https://www.v2ex.com/t/576014#reply0" target="_blank" rel="noopener">https://www.v2ex.com/t/576014#reply0</a></p><p>Fighting <del>~</del> 冲鸭</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;想法从而而来&quot;&gt;&lt;a href=&quot;#想法从而而来&quot; class=&quot;headerlink&quot; title=&quot;想法从而而来&quot;&gt;&lt;/a&gt;想法从而而来&lt;/h2&gt;&lt;p&gt;主要是做开发这么久了，自己还没有一个完整的独立开发的项目。有机会接触了几个月的Taro多端编译型框架的开发，
      
    
    </summary>
    
    
      <category term="感悟" scheme="http://binzhizhu.github.io/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>毕业一年，回首大学时光</title>
    <link href="http://binzhizhu.github.io/2019/06/16/%E6%AF%95%E4%B8%9A%E4%B8%80%E5%B9%B4%EF%BC%8C%E5%9B%9E%E9%A6%96%E5%A4%A7%E5%AD%A6%E6%97%B6%E5%85%89/"/>
    <id>http://binzhizhu.github.io/2019/06/16/毕业一年，回首大学时光/</id>
    <published>2019-06-16T15:34:30.000Z</published>
    <updated>2019-06-17T15:15:24.962Z</updated>
    
    <content type="html"><![CDATA[<p>距离毕业已经将一年，我其实并不是很擅长写回忆这一类的东西，但是在这个时间节点，以及此时此刻，内心驱使着我去回忆一些过往。  </p><h2 id="大一，我过得很孤僻"><a href="#大一，我过得很孤僻" class="headerlink" title="大一，我过得很孤僻"></a>大一，我过得很孤僻</h2><h3 id="高考失利"><a href="#高考失利" class="headerlink" title="高考失利"></a>高考失利</h3><p>我是2014届的，当年高考成绩对我的打击很大，但是我又不能不去接受这个事实。  为什么要这么说？当你高考失利的时候，无非有两种选择：1.复读；2.接受。我是属于后者，因为复读对于我来说是一个很长很长的噩梦，我是一个很难控制自己的情绪的人，可能我此时此刻我很有自信的说：下次我一定会考得比之前好。但是复读是一场持久战，我会觉得很折磨，我的抗压能力很差，所以我选择了后者。当然前者讨论的仅仅是选择性的问题，而我选择了后者，所以我又不得不接受后者产生的一系列问题。不复读的话，意味着尽可能的选择一个相对较好的学校以及专业，很遗憾，好的东西总是与我擦肩而过。我是第三志愿被录取的，虽晚专业不是调剂，但是结果让我很不满意：广州郊区(山卡拉)的某所三本本科独立院校，其实就是烧钱拿个本科文凭，美名其曰”独立学院”。</p><h3 id="开学前，遭遇了一场车祸"><a href="#开学前，遭遇了一场车祸" class="headerlink" title="开学前，遭遇了一场车祸"></a>开学前，遭遇了一场车祸</h3><p>那也是异常噩梦，跟朋友骑车去游泳的途中，拐弯的时候为了躲闪一辆大车，撞到了路旁的护栏，当时从车上摔下来与地面摩擦大概有2~3米的距离。幸运的是是自己摔倒，并没有与其他车辆发生撞击而摔倒，否则的话，后果不堪设想。  </p><p>我记得当时爬起来的时候，大家都还有知觉。也不觉得身体有疼痛感，但是手、脚多处擦伤严重，慢慢的我的身体就开始疼痛起来，甚至几度趋于昏迷的状态，这也是因为流血导致的轻微昏迷的状态。我记得当时有那么一刻我的眼睛是看不到的，我当时以为我要瞎了，吓得我哭了起来。那会应该是差不多开学的时候，所以发生了这么一个事情，回到家里，受尽了长辈们的批评与责骂，不过这也是应该的，我也很后悔当时跟着去游泳。跟学校领导请了半个月的假期，当时其实身体并没有完全恢复，是我自己要求提去学校报到的，因为我想参与军训。我是一个很感性的人，认为如果念大学没有经历过军训的洗礼，我会觉得失去了大学的色彩。其实我刚去那会，学校已经军训一个星期左右了，我就是带着这样的一种身体与情绪去大学报到的，现在回想起来还挺特别的，但仔细想想其实是可悲的。</p><h3 id="与班集体脱节"><a href="#与班集体脱节" class="headerlink" title="与班集体脱节"></a>与班集体脱节</h3><p>经历了那么多的事情，我回到了学校。因为是延迟报到，所以我被分到了一个混合宿舍，并不是跟自己班里的人住在一起。当时觉得对自己不公平，现在想起来：一切都是最好的安排。  </p><p>报到那会是我爸还有他的一个朋友开着家里的农民车皮卡载我来学校的。宿舍是六人宿舍，就差我一人，后来知道4名是外国语英德双语专业的，还有一名是跟我同系不同专业的。因为我是后面来的，他们已经军训一个星期多了，所以队形队列都是已经拍好了的，哪个方队多少人等等，我还是被安排到了与其他班级一起军训。这就是我为什么说的与班集体脱节，因为宿舍是混合宿舍，军训也是跟其他班级人一起，我基本没什么机会与班级的人产生沟通与交流，那会觉得挺压抑的。毕竟那会是刚刚步入大学，青涩的脸庞，内敛的性格，加上被分配到这么一种环境，对我来说还是有点阻碍的。不过，好在我会自觉主动的去与人沟通，这一点我觉得我还是做得比较好的。军训跟其他班级的一起，慢慢的也会认识一些”战友”，逐渐的就融入了进去。对于班级来说，那会我们一早一晚是要上晚自习的，说起来也是挺尴尬的，挺孤僻的。因为我是混合宿舍，宿舍楼都不是跟同系的人在一个地方，所以我上课都是一个人去的，别人都是一个一个宿舍去上晚自习，而我刚开始都是自己一个人去的，不过还好我还有一个同系的舍友，后来就偶尔会一起去，刚好也有个伴。</p><h3 id="大一生活"><a href="#大一生活" class="headerlink" title="大一生活"></a>大一生活</h3><p>随着时间的推移，自己也逐步的适应了大学生活。军训完美的结束，我并没有缺席，跟大家一样，我也拥有了自己大学四年的舍友、老师、同学。后来的生活基本都是一个调调：上课、吃饭、社团。我大一加入了好几个社团：</p><ul><li>计算机协会； </li><li>吉他协会；  </li><li>青年志愿者协会；  </li></ul><p>后来大多数的时间都在青年志愿者协会，因为那里的人比较有趣，而且能够做一些力所能及、对社会有益的事情。</p><h2 id="大二，我是一个”部长”"><a href="#大二，我是一个”部长”" class="headerlink" title="大二，我是一个”部长”"></a>大二，我是一个”部长”</h2><p>大二应该说是玩的最嗨的一年。</p><h2 id="大三，我是一个”助理辅导员”"><a href="#大三，我是一个”助理辅导员”" class="headerlink" title="大三，我是一个”助理辅导员”"></a>大三，我是一个”助理辅导员”</h2><p>  // TODO </p><h2 id="大四，我是一个”优秀毕业生”"><a href="#大四，我是一个”优秀毕业生”" class="headerlink" title="大四，我是一个”优秀毕业生”"></a>大四，我是一个”优秀毕业生”</h2><p>// TODO</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;距离毕业已经将一年，我其实并不是很擅长写回忆这一类的东西，但是在这个时间节点，以及此时此刻，内心驱使着我去回忆一些过往。  &lt;/p&gt;
&lt;h2 id=&quot;大一，我过得很孤僻&quot;&gt;&lt;a href=&quot;#大一，我过得很孤僻&quot; class=&quot;headerlink&quot; title=&quot;大一，我
      
    
    </summary>
    
    
      <category term="感悟" scheme="http://binzhizhu.github.io/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>cypress-file-upload真的香</title>
    <link href="http://binzhizhu.github.io/2019/06/06/cypress-file-upload%E7%9C%9F%E7%9A%84%E9%A6%99/"/>
    <id>http://binzhizhu.github.io/2019/06/06/cypress-file-upload真的香/</id>
    <published>2019-06-06T13:14:30.000Z</published>
    <updated>2019-06-07T01:22:20.568Z</updated>
    
    <content type="html"><![CDATA[<h2 id="cypress-file-upload-是什么"><a href="#cypress-file-upload-是什么" class="headerlink" title="cypress-file-upload 是什么"></a>cypress-file-upload 是什么</h2><p>之前有写过一遍博客大致介绍了cypress是什么：前端e2e测试框架(歪果仁开发)。  </p><p>最近因为有个项目因为改版的原因，差不多到上线的节点了，所以还是希望把测试维护起来。e2e实际上就是end to end 嘛，你如果直接理解为验收测试也不为过。众所周知咯，维护前端测试实际上是一件很麻烦的事情，因为有复杂的业务、复杂的UI交互，人工测试实在是太耗时费力(成本)，另外前端项目是比较不那么stable 的。因为前端样式是可能时常变化的，今天断言的这个按钮是红色、明天可能是白色了。所以对于小型公司来说的话，建议是在一个stable 的阶段去维护比较有收益，最近的项目改版就是一个有力的例子。V1版本维护了一套stable的测试用例，突然说需要改版，基本是换肤，对于UI来说基本是不一致的了，这导致之前维护的版本的测试基本是需要重新维护的了。</p><h2 id="为什么要使用cypress-file-upload"><a href="#为什么要使用cypress-file-upload" class="headerlink" title="为什么要使用cypress-file-upload"></a>为什么要使用cypress-file-upload</h2><p>前端很多场景是需要上传文件的，最通常的就是上传图片。也就是说我们写测试的过程中，例如填写一个表单，需要上传图片，然后才能提交到后台。所以我们是需要模拟上传图片的，简单来说就是把这个事情自动化，本来我们就是自动化测试嘛。之前也写过一些cypress简单的用例，但是上传图片之前没去琢磨过，于是我就去gayhub疯狂的search issues ，大致关键词就是：”cypress how to upload file”。果不其然，还是挺多歪果仁提过这个issue的，所以我就大致认真的看了一下，因为都是英文，所以还是得认真的去消化 ：）。我发现了一个关键的issue：<a href="https://github.com/cypress-io/cypress/issues/170" target="_blank" rel="noopener">https://github.com/cypress-io/cypress/issues/170</a>  然后摸石头过河，发现有些朋友贴出的好的idea ：cypress-file-upload , 直接npm install - -save -dev cypress-file-upload 就可以，具体可以直接Google咯。</p><p>首先先 npm 安装 cypress-file-upload 哦</p><p>大致的用法是，这里贴一下代码块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> *  上传图片 【自己封了一层】</span><br><span class="line"> *</span><br><span class="line"> *  参考  https://github.com/cypress-io/cypress/issues/170</span><br><span class="line"> */</span><br><span class="line">Cypress.Commands.add(&apos;uploadFile&apos;, (fileName, fileType, selector,subjectType) =&gt; &#123;</span><br><span class="line">  cy.fixture(fileName).then(fileContent =&gt; &#123;</span><br><span class="line">    // console.log(&apos;fileContent&apos;,fileContent)</span><br><span class="line">    cy.get(selector).upload(</span><br><span class="line">      &#123; fileContent, fileName, mimeType: fileType &#125;,</span><br><span class="line">      &#123; subjectType: subjectType &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   //模拟图片上传</span><br><span class="line">    const fileName = &apos;images/logo.png&apos;;</span><br><span class="line">    const fileType = &apos;image/png&apos;;</span><br><span class="line">    const subjectType = &apos;input&apos;;</span><br><span class="line">    const selector = &apos;input[type=&quot;file&quot;]&apos;</span><br><span class="line"></span><br><span class="line">    cy.uploadFile(fileName,fileType,selector,subjectType)</span><br></pre></td></tr></table></figure><p>有几点注意的：</p><ol><li>uploadFile是自己封装的func，需要统一放在commands.js [官方提供的diy func]</li><li>此时直接使用cy.get(…).upload(‘’) 是会报错的 找不到upload 方法，我们需要在commands.js 引入 import ‘cypress-file-upload’ ，之前我也以为npm 安装了即可，但是后来去gayhub 发现需要在commands import一次</li></ol><p>最后大功告成咯 ： ）  ci 上跑了一波 没啥问题 大功告成 cypress真的香哦 </p><video src="/Users/apple/Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat/2.0b4.0.9/2ae4ac7ee7b52045568b2f00f252714c/Message/MessageTemp/f86605ec697634cf912542f2dc13a2a1/Video/master_certify_center.js_1559822306858595.mp4"></video>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;cypress-file-upload-是什么&quot;&gt;&lt;a href=&quot;#cypress-file-upload-是什么&quot; class=&quot;headerlink&quot; title=&quot;cypress-file-upload 是什么&quot;&gt;&lt;/a&gt;cypress-file-uplo
      
    
    </summary>
    
    
      <category term="cypress，测试" scheme="http://binzhizhu.github.io/tags/cypress%EF%BC%8C%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>熬夜在VPS简单搭了个frp内网穿透web服务</title>
    <link href="http://binzhizhu.github.io/2019/05/02/%E7%86%AC%E5%A4%9C%E5%9C%A8VPS%E7%AE%80%E5%8D%95%E6%90%AD%E4%BA%86%E4%B8%AAfrp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8Fweb%E6%9C%8D%E5%8A%A1/"/>
    <id>http://binzhizhu.github.io/2019/05/02/熬夜在VPS简单搭了个frp内网穿透web服务/</id>
    <published>2019-05-02T03:56:22.000Z</published>
    <updated>2019-05-02T03:59:37.870Z</updated>
    
    <content type="html"><![CDATA[<h2 id="搭建成功"><a href="#搭建成功" class="headerlink" title="搭建成功 : )"></a>搭建成功 : )</h2><p><a href="http://ww1.sinaimg.cn/large/00655MmOgy1g2mbbs6c3nj31gc13qkjl.jpg" target="_blank" rel="noopener">http://ww1.sinaimg.cn/large/00655MmOgy1g2mbbs6c3nj31gc13qkjl.jpg</a></p><h2 id="回顾一下"><a href="#回顾一下" class="headerlink" title="回顾一下"></a>回顾一下</h2><p>小白前几天发了一个帖子，简单调研了一下大佬们平时用服务器来干啥，大多数的答案基本如下：<br>1.闲置、吃灰<br>2.搭梯子、frp 内网穿透<br>3.测试服务器<br>4.API 调用<br>5.等等更加高级的玩法<br>这里贴一下之前的帖子 <a href="https://www.v2ex.com/t/559909#reply93" target="_blank" rel="noopener">https://www.v2ex.com/t/559909#reply93</a></p><h2 id="为什么瞎几把搞"><a href="#为什么瞎几把搞" class="headerlink" title="为什么瞎几把搞"></a>为什么瞎几把搞</h2><p>然后我琢磨了一下，觉得吃灰的话还不如自己搭一个内网穿透，也就是大家口中说的 frp 咯。<br>之前我毕业前实习的时候做开发是用花钱去买市场上的一些内网穿透的产品，之前用的是 natapp，开始用免费的。<br>结果可想而知，那速度慢的一批。于是买了个 10 元 /月的套餐，流量勉强还能接受吧，基本用于微信开发，大家知道的啦，sbox 沙盒那边配置一下开发起来以及测试比较方便，免得每次都得更新到线上才可以测试，或者说更新到测试服务器，这样开销有点大，所以那会就这样搞。后来业务逐渐少了，自己也买了个阿里云的小学机，虽然尿管，但是自己搭搭博客还是🆗的。这里就不扯淡了，有点丢人，这里高手如云，大家给个面子。  </p><h2 id="瞎几把搞"><a href="#瞎几把搞" class="headerlink" title="瞎几把搞"></a>瞎几把搞</h2><p>搭建这个 frp 的公网服务器我是选择了我闲置吃灰的 VPS,搬瓦工买的，$19.99/year。现在估计玩蛇了，上次看了一下，有点贵了，我有点怕不能续费。那么平时只是翻墙，所以打算就拿它开刀呗。</p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ul><li>公网服务器安装最新版本的 release，根据 arch。  </li><li>配置 frps.ini</li><li>测试连接</li><li>内网同样安装相同版本的 frp</li><li>配置 frpc.ini （注意端口统一的问题）</li><li>阿里云添加一个新的域名</li><li>域名解析到自己的公网 ip</li><li>由于要让外网访问到内网，所以在服务器增加一个虚拟域名。（ root 填自己内网的项目地址即可）</li><li>内网测试连接</li><li>收工</li></ul><p>其实过程中遇到一些小问题，官方 issue 也很多人提到过，类似于：<br><code>[W] [service.go:82] login to server failed: dial tcp xxx.xxx.xxx.xxx:7000: connect: connection timed out</code></p><p>交流贴，纯粹跟大家分享一下，并不是炫技哈~~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;搭建成功&quot;&gt;&lt;a href=&quot;#搭建成功&quot; class=&quot;headerlink&quot; title=&quot;搭建成功 : )&quot;&gt;&lt;/a&gt;搭建成功 : )&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://ww1.sinaimg.cn/large/00655MmOgy1g2mbbs
      
    
    </summary>
    
    
      <category term="frp" scheme="http://binzhizhu.github.io/tags/frp/"/>
    
  </entry>
  
  <entry>
    <title>CSS BEM 书写规范</title>
    <link href="http://binzhizhu.github.io/2019/04/20/CSS-BEM-%E4%B9%A6%E5%86%99%E8%A7%84%E8%8C%83/"/>
    <id>http://binzhizhu.github.io/2019/04/20/CSS-BEM-书写规范/</id>
    <published>2019-04-20T14:07:48.000Z</published>
    <updated>2019-04-20T14:09:15.933Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BEM命名约定"><a href="#BEM命名约定" class="headerlink" title="BEM命名约定"></a>BEM命名约定</h2><hr><p>使用 <a href="http://bem.info/" target="_blank" rel="noopener">BEM</a> 命名规范，理论上讲，每行 <code>css</code> 代码都只有一个选择器。</p><p>BEM代表 <strong>“块（block）,元素（element）,修饰符（modifier）”</strong>,我们常用这三个实体开发组件。</p><p>在选择器中，由以下三种符号来表示扩展的关系：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-   中划线 ：仅作为连字符使用，表示某个块或者某个子元素的多单词之间的连接记号。</span><br><span class="line">__  双下划线：双下划线用来连接块和块的子元素</span><br><span class="line">_   单下划线：单下划线用来描述一个块或者块的子元素的一种状态</span><br><span class="line"></span><br><span class="line">type-block__element_modifier</span><br></pre></td></tr></table></figure><h3 id="块（block）"><a href="#块（block）" class="headerlink" title="块（block）"></a>块（block）</h3><p>一个块是设计或布局的一部分，它有具体且唯一地意义 ，要么是语义上的要么是视觉上的。</p><p>在大多数情况下，任何独立的页面元素（或复杂或简单）都可以被视作一个块。它的HTML容器会有一个唯一的CSS类名，也就是这个块的名字。</p><p>针对块的CSS类名会加一些前缀（ <code>ui-</code>），这些前缀在CSS中有类似 <a href="https://github.com/Tencent/tmt-workflow/wiki/%E2%92%9B-%5B%E8%A7%84%E8%8C%83%5D--CSS-BEM-%E4%B9%A6%E5%86%99%E8%A7%84%E8%8C%83" target="_blank" rel="noopener">命名空间</a> 的作用。</p><p>一个块的正式（实际上是半正式的）定义有下面三个基本原则：</p><ol><li>CSS中只能使用类名（不能是ID）。</li><li>每一个块名应该有一个命名空间（前缀）</li><li>每一条CSS规则必须属于一个块。</li></ol><p>例如：一个自定义列表 <code>.list</code> 是一个块，通常自定义列表是算在 <code>mod</code> 类别的，在这种情况下，一个 <code>list</code> 列表的block写法应该为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.list</span><br></pre></td></tr></table></figure><h3 id="元素（element）"><a href="#元素（element）" class="headerlink" title="元素（element）"></a>元素（element）</h3><p>块中的子元素是块的子元素，并且子元素的子元素在 <code>bem</code> 里也被认为是块的直接子元素。<strong>一个块中元素的类名必须用父级块的名称作为前缀。</strong></p><p>如上面的例子，<code>li.item</code> 是列表的一个子元素，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.list&#123;&#125;</span><br><span class="line">.list .item&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.list&#123;&#125;</span><br><span class="line">.list__item&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="修饰符（modifier）"><a href="#修饰符（modifier）" class="headerlink" title="修饰符（modifier）"></a>修饰符（modifier）</h3><p>一个“修饰符”可以理解为一个块的特定状态，标识着它持有一个特定的属性。</p><p>用一个例子来解释最好不过了。一个表示按钮的块默认有三个大小：小，中，大。为了避免创建三个不同的块，最好是在块上加修饰符。这个修饰符应该有个名字（比如：<code>size</code> ）和值（ <code>small</code>，<code>normal</code> 或者 <code>big</code> ）。</p><p>如上面的例子中，表示一个选中的列表，和一个激活的列表项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.list&#123;&#125;</span><br><span class="line">.list.select&#123;&#125;</span><br><span class="line">.list .item&#123;&#125;</span><br><span class="line">.list .item.active&#123;&#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">.list&#123;&#125;</span><br><span class="line">.list_select&#123;&#125;</span><br><span class="line">.list__item&#123;&#125;</span><br><span class="line">.list__item_active&#123;&#125;</span><br></pre></td></tr></table></figure><h1 id="LESS-书写规范"><a href="#LESS-书写规范" class="headerlink" title="LESS 书写规范"></a>LESS 书写规范</h1><p>使用 <code>.less</code> 后缀的文件来存储变量、混合代码以及最终合并压缩。</p><table><thead><tr><th>子less</th><th>注解</th></tr></thead><tbody><tr><td><code>lib-base.less</code></td><td>预定义的变量，例如颜色、字号、字体</td></tr><tr><td><code>lib-mixins.less</code></td><td>用于混合的代码，例如渐变、半透明的混合</td></tr><tr><td><code>lib-reset.less</code></td><td>初始化</td></tr><tr><td><code>lib-ui.less</code></td><td>颗粒化ui功能</td></tr><tr><td><code>xxx.less</code></td><td>模块样式</td></tr></tbody></table><p><code>.less</code> 文件的引用顺序会对最终编译的样式的作用域和优先级产生影响，请尽量按照由底层到自定义的顺序来引用。</p><h2 id="关于风格"><a href="#关于风格" class="headerlink" title="关于风格"></a>关于风格</h2><h2 id="书写原则"><a href="#书写原则" class="headerlink" title="书写原则"></a>书写原则</h2><h5 id="1-原则上不会出现2层以上选择器嵌套"><a href="#1-原则上不会出现2层以上选择器嵌套" class="headerlink" title="1. 原则上不会出现2层以上选择器嵌套"></a>1. 原则上不会出现<code>2层以上</code>选择器嵌套</h5><p>使用<code>BEM</code>原则，用命名来解耦，所有类名都为一层，增加效率和复用性</p><h5 id="2-两层选择器嵌套出现在-mod-xxx-item-current子元素的情况，如下："><a href="#2-两层选择器嵌套出现在-mod-xxx-item-current子元素的情况，如下：" class="headerlink" title="2. 两层选择器嵌套出现在.mod-xxx__item_current子元素的情况，如下："></a>2. 两层选择器嵌套出现在<code>.mod-xxx__item_current</code>子元素的情况，如下：</h5><p>使用<strong>推荐</strong>的嵌套写法</p><p><strong>常规写法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.xxx&#123;&#125;</span><br><span class="line">.xxx__item&#123;&#125;</span><br><span class="line">.xxx__item_current&#123;&#125;</span><br><span class="line">// 嵌套写法</span><br><span class="line">.xxx__item_current .mod-xxx__link&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>推荐：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.xxx&#123;&#125;</span><br><span class="line">.xxx__item&#123;&#125;</span><br><span class="line">.xxx__item_hightlight&#123;&#125;</span><br><span class="line">.xxx__product-name&#123;&#125;</span><br><span class="line">.xxx__link&#123;&#125;</span><br><span class="line">.xxx__ming-zi-ke-yi-hen-chang&#123;&#125;</span><br><span class="line"></span><br><span class="line">// 嵌套写法</span><br><span class="line">.xxx__item_current&#123;</span><br><span class="line">    .xxx__link&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的HTML结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul class=&quot;xxx&quot;&gt;</span><br><span class="line">    &lt;li class=&quot;xxx__item&quot;&gt;第一项</span><br><span class="line">        &lt;div class=&quot;xxx__product-name&quot;&gt;我是名称&lt;/div&gt;</span><br><span class="line">        &lt;span class=&quot;xxx__ming-zi-ke-yi-hen-chang&quot;&gt;看类名&lt;/span&gt;</span><br><span class="line">        &lt;a href=&quot;#&quot; class=&quot;xxx__link&quot;&gt;我是link&lt;/a&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">    &lt;li class=&quot;xxx__item xxx__item_current&quot;&gt;第二项 且 当前选择项</span><br><span class="line">        &lt;div class=&quot;xxx__product-name&quot;&gt;我是名称&lt;/div&gt;</span><br><span class="line">        &lt;a href=&quot;#&quot; class=&quot;xxx__item-link&quot;&gt;我是link&lt;/a&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">    &lt;li class=&quot;xxx__item xxx__item_hightlight&quot;&gt;第三项 且 特殊高亮</span><br><span class="line">         &lt;div class=&quot;xxx__product-name&quot;&gt;我是名称&lt;/div&gt;</span><br><span class="line">        &lt;a href=&quot;#&quot; class=&quot;xxx__item-link&quot;&gt;我是link&lt;/a&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><h2 id="BEM-解决问题"><a href="#BEM-解决问题" class="headerlink" title="BEM 解决问题"></a>BEM 解决问题</h2><p>组件之间的完全解耦，不会造成命名空间的污染，如：<code>.mod-xxx ul li</code> 的写法带来的潜在的嵌套风险。</p><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>BEM 命名会使得 Class 类名变长，但经过 gzip 压缩后这个带宽开销可以忽略不计</p><p>xxx__item_hightlight</p><h2 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h2><ul><li>更新文档只是有利于提高自己开发效率 有版权问题 请联系本人修正。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;BEM命名约定&quot;&gt;&lt;a href=&quot;#BEM命名约定&quot; class=&quot;headerlink&quot; title=&quot;BEM命名约定&quot;&gt;&lt;/a&gt;BEM命名约定&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;使用 &lt;a href=&quot;http://bem.info/&quot; target=&quot;_blank&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MacOS PhpStorm 快捷键</title>
    <link href="http://binzhizhu.github.io/2019/04/20/MacOS-PhpStorm-%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://binzhizhu.github.io/2019/04/20/MacOS-PhpStorm-快捷键/</id>
    <published>2019-04-20T14:04:03.000Z</published>
    <updated>2019-04-20T14:05:09.575Z</updated>
    
    <content type="html"><![CDATA[<p>全局搜索（command + shift + F）</p><p>显示类中的方法 （command + 7）</p><p>函数追踪 （command +鼠标点击）</p><p>单行注释/取消（command + /）</p><p>输入行号跳到某一行（command + l）</p><p>列出打开的文件（command + e）</p><p>删除当前行（command + x）</p><p>复制当前行（command + d）</p><p>跳到变量申明处（command + b）</p><p>格式化代码（command + option + l）</p><p>关闭当前窗口 （command + w）</p><p>项目刷新 （command + option + y）</p><p>多行注释（command + option + /）</p><p>查找//@todo标签（command + 6）</p><p>列出左侧文件（command + 1）</p><p>切换大小写（command + shift + u）</p><p>复制（command + c）</p><p>粘贴（command + v）</p><p>撤销（command + z）</p><p><strong>显示行号</strong></p><p>IDE settings-&gt;Editor-&gt;General-&gt;Appearance-&gt;Show Line Number</p><p><strong>换肤</strong></p><p>IDE settings-&gt;Editor-&gt;Colors &amp; Fonts 下拉框选择即可。</p><p><strong>设置字体大小</strong></p><p>IDE settings-&gt;Editor-&gt;Colors &amp; Fonts-&gt;font 设置即可。</p><p><strong>配置文件头默认注释</strong></p><p>IDE settings-&gt;Editor-&gt;File and Code Templates-&gt;PHP File Header。</p><p><strong>设置注释不顶格</strong></p><p>IDE settings-&gt;Editor-&gt;Code Style-&gt;PHP 去掉勾 Line comment at first column。</p><p><strong>去掉右上角游览器</strong></p><p>IDE settings-&gt;tools -&gt;WebBrowsers  去掉选中即可。</p><p><strong>PHPStorm + CodeSniffer</strong></p><p><strong>设置</strong></p><p>IDE settings-&gt;Languages &amp; Frameworks-&gt;PHP-&gt;CodeSniffer-&gt; 配置即可。</p><p><strong>选择编码规范</strong></p><p>IDE settings-&gt;Editor-&gt;Inspections-&gt;PHP-&gt;PHP Code Sniffer validation(打钩) -&gt;Coding Standard 选择规范（PEAR）</p><h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><ul><li>待更新</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;全局搜索（command + shift + F）&lt;/p&gt;
&lt;p&gt;显示类中的方法 （command + 7）&lt;/p&gt;
&lt;p&gt;函数追踪 （command +鼠标点击）&lt;/p&gt;
&lt;p&gt;单行注释/取消（command + /）&lt;/p&gt;
&lt;p&gt;输入行号跳到某一行（command +
      
    
    </summary>
    
    
      <category term="工具" scheme="http://binzhizhu.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>docker-Compose 相关命令</title>
    <link href="http://binzhizhu.github.io/2019/04/20/docker-Compose-%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
    <id>http://binzhizhu.github.io/2019/04/20/docker-Compose-相关命令/</id>
    <published>2019-04-20T13:52:59.000Z</published>
    <updated>2019-04-20T13:58:58.857Z</updated>
    
    <content type="html"><![CDATA[<p>下面将介绍 <code>docker-compose</code> 子命令的使用。也可以通过运行 <code>docker-compose --help</code>来查看这些信息。</p><ul><li><a href="#build">build</a></li><li><a href="#help">help</a></li><li><a href="#kill">kill</a></li><li><a href="#ps">ps</a></li><li><a href="#restart">restart</a></li><li><a href="#run">run</a></li><li><a href="#start">start</a></li><li><a href="#up">up</a></li><li><a href="#logs">logs</a></li><li><a href="#port">port</a></li><li><a href="#pull">pull</a></li><li><a href="#rm">rm</a></li><li><a href="#scale">scale</a></li><li><a href="#stop">stop</a></li></ul><h3 id="build"><a href="#build" class="headerlink" title="build"></a>build</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">用法：build [options] [SERVICE...]</span><br><span class="line">选项：</span><br><span class="line">--force-rm  总是移除构建过程中产生的中间项容器</span><br><span class="line">--no-cache  构建镜像过程中不使用Cache</span><br><span class="line">--pull      总是尝试获取更新版本的镜像</span><br></pre></td></tr></table></figure><p>构建服务并打上<code>project_service</code>风格的标签（如：<code>composetest_db</code>）。如果你更改了服务的<code>Dockerfile</code>或者构建目录下的内容，需要运行<code>docker-compose build</code>重新构建服务。</p><h3 id="help"><a href="#help" class="headerlink" title="help"></a>help</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用法：help COMMAND</span><br></pre></td></tr></table></figure><p>显示命令的帮助信息及用法教程。</p><h3 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">用法：kill [options] [SERVICE...]</span><br><span class="line">选项：</span><br><span class="line">-s SIGNAL         SIGNAL 是发送给容器的信号量，默认是 SIGKILL</span><br></pre></td></tr></table></figure><p>通过发送<code>SIGKILL</code>信号来强制终止运行中的容器，也可以发送指定的信号量，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose kill -s SIGINT</span><br></pre></td></tr></table></figure><h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">用法：ps [options] [SERVICE...]</span><br><span class="line">选项：</span><br><span class="line">-q仅仅显示容器ID</span><br></pre></td></tr></table></figure><p>列出容器。</p><h3 id="restart"><a href="#restart" class="headerlink" title="restart"></a>restart</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">用法：restart [options] [SERVICE...]</span><br><span class="line">选项：</span><br><span class="line">-t, --timeout TIMEOUT      设置关闭服务的超时时间，单位为秒，默认为10</span><br></pre></td></tr></table></figure><p>重启服务。</p><h3 id="run"><a href="#run" class="headerlink" title="run"></a>run</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">用法：run [options] [-e KEY=VAL...] SERVICE [COMMAND] [ARGS...]</span><br><span class="line">选项：</span><br><span class="line">-d                    分离模式：在后台运行容器，只打印新的容器名称</span><br><span class="line">--entrypoint CMD      覆盖镜像的入口点（CMD ...）</span><br><span class="line">-e KEY=VAL            设置环境变量，可以使用多次</span><br><span class="line">-u, --user=&quot;&quot;         通过指定的用户名或用户id来运行</span><br><span class="line">--no-deps             不启动link连接的服务</span><br><span class="line">--rm                  运行结束后移除容器，在分离模式下将被忽略</span><br><span class="line">-p, --publish=[]      将容器暴露端口映射到主机端口</span><br><span class="line">--service-ports       通过服务映射到主机的端口执行命令</span><br><span class="line">-T                    禁用pseudo-tty分配，默认会分配一个TTY</span><br></pre></td></tr></table></figure><p>对服务运行的命令。例如，以下命令启动web服务并运行bash命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose run web bash</span><br></pre></td></tr></table></figure><p><code>run</code>命令，将使用服务中已经定义的配置来创建运行一个新的容器。也就是说，如此创建的容器，将会使用相同的挂载卷、容器连接等相同的配置，但它们依旧可以存在差异。</p><p>第一个区别是，可以使用<code>run</code>命令覆盖服务中指定的运行命令。例如，<code>web</code>服务中的配置指定的运行命令为<code>bash</code>，那么<code>docker-compose run web python app.py</code>将使用<code>python app.py</code>来覆盖它。</p><p>第二个区别是，<code>docker-compose run</code>命令不会创建任何服务配置中指定的端口映射，这样可以防止多个容器映射同一端口的冲突。如果你需要使得服务的端口创建并映射到主机，需要指定<code>--service-ports</code>标记，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose run --service-ports web python manage.py shell</span><br></pre></td></tr></table></figure><p>或者可以手动指定端口映射，和使用<code>docker run</code>一样，使用<code>--publish</code>或<code>-p</code>选项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose run --publish 8080:80 -p 2022:22 -p 127.0.0.1:2021:21 web python manage.py shell</span><br></pre></td></tr></table></figure><p>如果启动一个带有容器连接的服务，<code>run</code>命令将首先检查连接到的服务是否已运行，如果是停止状态，将会启动它，直到所有的相关服务都处于正在运行状态，才会执行你创建的命令。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose run db psql -h db -U docker</span><br></pre></td></tr></table></figure><p>这将创建一个与PostgreSQL容器<code>db</code>交互服务。</p><p>如果你不希望启动相关联容器，可以使用<code>--no-deps</code>标记：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose run --no-deps web python manage.py shell</span><br></pre></td></tr></table></figure><h3 id="start"><a href="#start" class="headerlink" title="start"></a>start</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用法：start [SERVICE...]</span><br></pre></td></tr></table></figure><p>启动服务中已经存在的容器。</p><h3 id="up"><a href="#up" class="headerlink" title="up"></a>up</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">用法：up [options] [SERVICE...]</span><br><span class="line">选项：</span><br><span class="line">-d                     分离模式：在后台运行容器，只打印新的容器名称</span><br><span class="line">--no-color             单色输出</span><br><span class="line">--no-deps              不启动link连接的服务</span><br><span class="line">--force-recreate       强制重新创建容器，即使镜像没有任何改变。与--no-recreate会冲突</span><br><span class="line">--no-recreate          如果对应容器已经存在,不重新创建它。与--force-recreate会冲突</span><br><span class="line">--no-build             不构建镜像，即使缺失</span><br><span class="line">-t, --timeout TIMEOUT  为容器设置关闭超时时间，单位：秒 (默认为 10)</span><br></pre></td></tr></table></figure><p>对服务，构建镜像、(重新)创建容器、启动容器。</p><p>该命令还将启动任何相关的且没有被启动的服务。</p><p><code>docker-compose up</code>命令将显示所有容器的输出，命令结束时，所有容器都将关闭。运行<code>docker-compose up -d</code>将在后台启动运行容器。</p><p>如果服务中已经存在运行中的容器了，并且在容器创建后更改服务配置或者镜像，<code>docker-compose up</code>命令将会停止当前容器（保存挂载卷）并重新构建启动容器。当然，也可以通过<code>--no-recreate</code>选项来避免重新构建。</p><p>使用<code>--force-recreate</code>标记，可以强制停止并重构所有容器。</p><h3 id="logs"><a href="#logs" class="headerlink" title="logs"></a>logs</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">用法：logs [options] [SERVICE...]</span><br><span class="line">选项：</span><br><span class="line">--no-color  单色输出</span><br></pre></td></tr></table></figure><p>显示服务输出的日志内容。</p><h3 id="port"><a href="#port" class="headerlink" title="port"></a>port</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">用法：port [options] SERVICE PRIVATE_PORT</span><br><span class="line">选项：</span><br><span class="line">--protocol=proto  tcp 或 udp [默认为 tcp]</span><br><span class="line">--index=index     对应实例服务的第几个容器[默认为 1]</span><br></pre></td></tr></table></figure><p>打印服务中端口绑定对应的主机端口。</p><h3 id="pull"><a href="#pull" class="headerlink" title="pull"></a>pull</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">用法：pull [options] [SERVICE...]</span><br><span class="line">选项：</span><br><span class="line">--ignore-pull-failures 尽可能拉取服务，忽略拉取失败</span><br></pre></td></tr></table></figure><p>拉取服务镜像。</p><h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">用法：rm [options] [SERVICE...]</span><br><span class="line">选项:</span><br><span class="line">-f, --force   强制删除，不询问确认信息</span><br><span class="line">-v            移除容器挂载的卷</span><br></pre></td></tr></table></figure><p>删除停止的服务容器。</p><h3 id="scale"><a href="#scale" class="headerlink" title="scale"></a>scale</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用法：scale [SERVICE=NUM...]</span><br></pre></td></tr></table></figure><p>设置一个服务需要运行的容器数量。<br>参数形式为<code>service=num</code>。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose scale web=2 worker=3</span><br></pre></td></tr></table></figure><h3 id="stop"><a href="#stop" class="headerlink" title="stop"></a>stop</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">用法：stop [options] [SERVICE...]</span><br><span class="line">选项：</span><br><span class="line">-t, --timeout TIMEOUT      设置关闭容器的超时时间</span><br></pre></td></tr></table></figure><p>停止容器而不移除，可以通<code>docker-compose start</code>重新启动。</p><h2 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h2><p>上面的doc并非本人撰写，但是我忘记在哪里看到并且下载到本地了，如有版权问题，请联系我补充更正，谢谢。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;下面将介绍 &lt;code&gt;docker-compose&lt;/code&gt; 子命令的使用。也可以通过运行 &lt;code&gt;docker-compose --help&lt;/code&gt;来查看这些信息。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#build&quot;&gt;build&lt;/a&gt;&lt;/li&gt;

      
    
    </summary>
    
    
      <category term="docker" scheme="http://binzhizhu.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>糟糕 玩cypress上瘾了</title>
    <link href="http://binzhizhu.github.io/2019/03/01/%E7%B3%9F%E7%B3%95-%E7%8E%A9cypress%E4%B8%8A%E7%98%BE%E4%BA%86/"/>
    <id>http://binzhizhu.github.io/2019/03/01/糟糕-玩cypress上瘾了/</id>
    <published>2019-03-01T05:17:26.000Z</published>
    <updated>2019-06-16T15:49:25.444Z</updated>
    
    <content type="html"><![CDATA[<h3 id="玩-e2e-cypress-上瘾了，你们前端项目一般如何测试？"><a href="#玩-e2e-cypress-上瘾了，你们前端项目一般如何测试？" class="headerlink" title="玩 e2e cypress 上瘾了，你们前端项目一般如何测试？"></a>玩 e2e cypress 上瘾了，你们前端项目一般如何测试？</h3><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>换了 Mac pro 不知不觉更喜欢深夜敲代码了，真的香！！！不知不觉已经快凌晨 4 点了，我带着困意还是打算发个帖子和大家共享一下我这几天琢磨的一些事情。本人其实是后端，但由于公司的发展与需求，开始着手维护前端项目，也一直在看 react （大佬可以带带我嘻）为了确保业务 flow 能够 stabling，最近公司前端项目在测试环节上选用了 e2e 的 cypress，琢磨了一阵子，体验还是很好的，开箱即用。</p><h3 id="体验"><a href="#体验" class="headerlink" title="体验"></a>体验</h3><ul><li><p>开箱即用</p></li><li><p>官方 doc 很多，利于开发与维护</p></li><li><p>gui 界面（ env：google 浏览器），可边测边调整</p></li><li><p>自定义 commands</p></li><li><p>自定义 fixture，可 mock 数据</p></li><li><p>支持 ci 运行测试，可上传到 bashBoard</p></li><li><p>关注测试覆盖率（ Chrome 的 coverage ）</p></li><li><p>截图功能，用例失败的场景节点会被截图保存，利于复现</p></li><li><p>录屏功能，每个测试用例都会记录下来（ MP4 ）</p></li><li><p>等等。。。  </p></li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>饿了么首页为例：验证搜索一个商品，断言如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">it(&apos;输入搜索词，结果正确展示&apos;, () =&gt; &#123;</span><br><span class="line">  cy.visit(&apos;https://h5.ele.me/&apos;)</span><br><span class="line">  // 点击跳转搜索页面</span><br><span class="line">  cy.get(&apos;.search&apos;).click()</span><br><span class="line"></span><br><span class="line">  cy.wait(200)</span><br><span class="line">  cy.get(&apos;input&apos;).type(&apos;麻辣烫&apos;)</span><br><span class="line"></span><br><span class="line">  cy.get(&apos;button&apos;).click()</span><br><span class="line"></span><br><span class="line">  // 目标页面地址包含 search 点击列表第一项</span><br><span class="line">  cy.wait(500)</span><br><span class="line">  cy.url().should(&apos;include&apos;, &apos;search&apos;)</span><br><span class="line">  cy.get(&apos;.shop&apos;).first().click()</span><br><span class="line"></span><br><span class="line">  // 跳转至商家详情页，找到购物车元素</span><br><span class="line">  cy.wait(500)</span><br><span class="line">  cy.get(&apos;.cartview&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>[原文链接]  <a href="https://zhuanlan.zhihu.com/p/32666685" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/32666685</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;玩-e2e-cypress-上瘾了，你们前端项目一般如何测试？&quot;&gt;&lt;a href=&quot;#玩-e2e-cypress-上瘾了，你们前端项目一般如何测试？&quot; class=&quot;headerlink&quot; title=&quot;玩 e2e cypress 上瘾了，你们前端项目一般如何测试
      
    
    </summary>
    
    
      <category term="cypress" scheme="http://binzhizhu.github.io/tags/cypress/"/>
    
      <category term="测试" scheme="http://binzhizhu.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>2018年度总结</title>
    <link href="http://binzhizhu.github.io/2019/01/29/2018%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    <id>http://binzhizhu.github.io/2019/01/29/2018年度总结/</id>
    <published>2019-01-29T09:32:19.000Z</published>
    <updated>2019-01-29T10:11:51.783Z</updated>
    
    <content type="html"><![CDATA[<p> 2018年过得很快，岁月如梭，其实是每一年都过得很快。但是18年对于我来说比较特别，6月份刚大学毕业，毕业至今的这一段时间不长不短，这一段经历不痛不痒。18年我给自己的tag是：”快乐“，结果背道而驰，活生生吃了一个”真香”警告。我乐于分享，乐于总结，热爱写<a href="http://binzhizhu.top" target="_blank" rel="noopener">博客</a>，总结当下的自己才能不断的进步。!</p><p><img src="\blogimages\11-16.png" alt="binzhizhu"></p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>每当回顾这一年，我总跟朋友说：我感觉我已经工作好几年了。大四第一学期上完课就开始跟同学到处跑招聘会，而且是愣头青的那种，技术小白抱着进大厂的心态，结果我就不多说了，2017.12拿到第一份offer，那家公司是网站开发，说真的很糟糕，刚开始我死活不愿去，但是没有更好的，想着刚出来混还是得咬咬牙，仅仅是当做一个跳板，见机行事。于是，只身前往搬砖的附近租了一间房间，开始了搬砖的生活 0.0 ，年后一回来就离开那家公司了。拿到了一家电商创业公司的offer，当时的技术Team给我感觉很好，愿意留下来沉淀自己。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 2018年过得很快，岁月如梭，其实是每一年都过得很快。但是18年对于我来说比较特别，6月份刚大学毕业，毕业至今的这一段时间不长不短，这一段经历不痛不痒。18年我给自己的tag是：”快乐“，结果背道而驰，活生生吃了一个”真香”警告。我乐于分享，乐于总结，热爱写&lt;a href
      
    
    </summary>
    
    
      <category term="summary" scheme="http://binzhizhu.github.io/tags/summary/"/>
    
  </entry>
  
</feed>
